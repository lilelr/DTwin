// The Round Table
digraph {
	0 [label="nodeID(0) "]
	1 [label="nodeID(1) Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=205]"]
	2 [label="nodeID(2) HashAggregate(keys=[], functions=[merge_sum(ws_ext_ship_cost#170), merge_sum(ws_net_profit#175), partial_count(distinct ws_order_number#159L)])"]
	3 [label="nodeID(3) HashAggregate(keys=[ws_order_number#159L], functions=[merge_sum(ws_ext_ship_cost#170), merge_sum(ws_net_profit#175)])"]
	4 [label="nodeID(4) HashAggregate(keys=[ws_order_number#159L], functions=[partial_sum(ws_ext_ship_cost#170), partial_sum(ws_net_profit#175)])"]
	5 [label="nodeID(5) Project [ws_order_number#159L, ws_ext_ship_cost#170, ws_net_profit#175]"]
	6 [label="nodeID(6) BroadcastHashJoin [ws_web_site_sk#155], [web_site_sk#82], Inner, BuildRight, false"]
	7 [label="nodeID(7) Project [ws_web_site_sk#155, ws_order_number#159L, ws_ext_ship_cost#170, ws_net_profit#175]"]
	8 [label="nodeID(8) BroadcastHashJoin [ws_ship_addr_sk#153], [ca_address_sk#69], Inner, BuildRight, false"]
	9 [label="nodeID(9) Project [ws_ship_addr_sk#153, ws_web_site_sk#155, ws_order_number#159L, ws_ext_ship_cost#170, ws_net_profit#175]"]
	10 [label="nodeID(10) BroadcastHashJoin [ws_ship_date_sk#144], [d_date_sk#41], Inner, BuildRight, false"]
	11 [label="nodeID(11) SortMergeJoin [ws_order_number#159L], [wr_order_number#189L], LeftSemi"]
	12 [label="nodeID(12) SortMergeJoin [ws_order_number#159L], [ws_order_number#24L], LeftSemi"]
	13 [label="nodeID(13) Sort [ws_order_number#159L ASC NULLS FIRST], false, 0"]
	14 [label="nodeID(14) Exchange hashpartitioning(ws_order_number#159L, 200), ENSURE_REQUIREMENTS, [plan_id=171]"]
	15 [label="nodeID(15) Filter ((isnotnull(ws_ship_date_sk#144) AND isnotnull(ws_ship_addr_sk#153)) AND isnotnull(ws_web_site_sk#155))"]
	16 [label="nodeID(16) FileScan parquet tpcds_500_parquet.web_sales[ws_ship_date_sk#144,ws_ship_addr_sk#153,ws_web_site_sk#155,ws_order_number#159L,ws_ext_ship_cost#170,ws_net_profit#175"]
	17 [label="nodeID(17) Project [ws_order_number#24L]"]
	18 [label="nodeID(18) SortMergeJoin [ws_order_number#24L], [ws_order_number#125L], Inner, NOT (ws_warehouse_sk#22 = ws_warehouse_sk#123)"]
	19 [label="nodeID(19) Sort [ws_order_number#24L ASC NULLS FIRST], false, 0"]
	20 [label="nodeID(20) Exchange hashpartitioning(ws_order_number#24L, 200), ENSURE_REQUIREMENTS, [plan_id=163]"]
	21 [label="nodeID(21) Filter (isnotnull(ws_order_number#24L) AND isnotnull(ws_warehouse_sk#22))"]
	22 [label="nodeID(22) FileScan parquet tpcds_500_parquet.web_sales[ws_warehouse_sk#22,ws_order_number#24L"]
	23 [label="nodeID(23) Sort [ws_order_number#125L ASC NULLS FIRST], false, 0"]
	24 [label="nodeID(24) Exchange hashpartitioning(ws_order_number#125L, 200), ENSURE_REQUIREMENTS, [plan_id=164]"]
	25 [label="nodeID(25) Filter (isnotnull(ws_order_number#125L) AND isnotnull(ws_warehouse_sk#123))"]
	26 [label="nodeID(26) FileScan parquet tpcds_500_parquet.web_sales[ws_warehouse_sk#123,ws_order_number#125L"]
	27 [label="nodeID(27) Project [wr_order_number#189L]"]
	28 [label="nodeID(28) SortMergeJoin [wr_order_number#189L], [ws_order_number#24L], Inner"]
	29 [label="nodeID(29) Sort [wr_order_number#189L ASC NULLS FIRST], false, 0"]
	30 [label="nodeID(30) Exchange hashpartitioning(wr_order_number#189L, 200), ENSURE_REQUIREMENTS, [plan_id=183]"]
	31 [label="nodeID(31) Filter isnotnull(wr_order_number#189L)"]
	32 [label="nodeID(32) FileScan parquet tpcds_500_parquet.web_returns[wr_order_number#189L"]
	33 [label="nodeID(33) Project [ws_order_number#24L]"]
	34 [label="nodeID(34) SortMergeJoin [ws_order_number#24L], [ws_order_number#125L], Inner, NOT (ws_warehouse_sk#22 = ws_warehouse_sk#123)"]
	35 [label="nodeID(35) Sort [ws_order_number#24L ASC NULLS FIRST], false, 0"]
	36 [label="nodeID(36) Exchange hashpartitioning(ws_order_number#24L, 200), ENSURE_REQUIREMENTS, [plan_id=175]"]
	37 [label="nodeID(37) Filter (isnotnull(ws_order_number#24L) AND isnotnull(ws_warehouse_sk#22))"]
	38 [label="nodeID(38) FileScan parquet tpcds_500_parquet.web_sales[ws_warehouse_sk#22,ws_order_number#24L"]
	39 [label="nodeID(39) Sort [ws_order_number#125L ASC NULLS FIRST], false, 0"]
	40 [label="nodeID(40) Exchange hashpartitioning(ws_order_number#125L, 200), ENSURE_REQUIREMENTS, [plan_id=176]"]
	41 [label="nodeID(41) Filter (isnotnull(ws_order_number#125L) AND isnotnull(ws_warehouse_sk#123))"]
	42 [label="nodeID(42) FileScan parquet tpcds_500_parquet.web_sales[ws_warehouse_sk#123,ws_order_number#125L"]
	43 [label="nodeID(43) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=190]"]
	44 [label="nodeID(44) Project [d_date_sk#41]"]
	45 [label="nodeID(45) Filter (((isnotnull(d_date#43) AND (cast(d_date#43 as date) >= 1999-02-01)) AND (cast(d_date#43 as date) <= 1999-04-02)) AND isnotnull(d_date_sk#41))"]
	46 [label="nodeID(46) FileScan parquet tpcds_500_parquet.date_dim[d_date_sk#41,d_date#43"]
	47 [label="nodeID(47) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=194]"]
	48 [label="nodeID(48) Project [ca_address_sk#69]"]
	49 [label="nodeID(49) Filter ((isnotnull(ca_state#77) AND (ca_state#77 = IL)) AND isnotnull(ca_address_sk#69))"]
	50 [label="nodeID(50) FileScan parquet tpcds_500_parquet.customer_address[ca_address_sk#69,ca_state#77"]
	51 [label="nodeID(51) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=198]"]
	52 [label="nodeID(52) Project [web_site_sk#82]"]
	53 [label="nodeID(53) Filter ((isnotnull(web_company_name#96) AND (web_company_name#96 = pri)) AND isnotnull(web_site_sk#82))"]
	54 [label="nodeID(54) FileScan parquet tpcds_500_parquet.web_site[web_site_sk#82,web_company_name#96"]
	1 -> 0
	2 -> 1
	3 -> 2
	4 -> 3
	5 -> 4
	6 -> 5
	7 -> 6
	8 -> 7
	9 -> 8
	10 -> 9
	11 -> 10
	12 -> 11
	13 -> 12
	14 -> 13
	15 -> 14
	16 -> 15
	17 -> 12
	18 -> 17
	19 -> 18
	20 -> 19
	21 -> 20
	22 -> 21
	23 -> 18
	24 -> 23
	25 -> 24
	26 -> 25
	27 -> 11
	28 -> 27
	29 -> 28
	30 -> 29
	31 -> 30
	32 -> 31
	33 -> 28
	34 -> 33
	35 -> 34
	36 -> 35
	37 -> 36
	38 -> 37
	39 -> 34
	40 -> 39
	41 -> 40
	42 -> 41
	43 -> 10
	44 -> 43
	45 -> 44
	46 -> 45
	47 -> 8
	48 -> 47
	49 -> 48
	50 -> 49
	51 -> 6
	52 -> 51
	53 -> 52
	54 -> 53
}
