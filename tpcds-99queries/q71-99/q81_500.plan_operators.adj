// The Round Table
digraph {
	0 [label="nodeID(0) "]
	1 [label="nodeID(1) Project [c_customer_id#73, c_salutation#79, c_first_name#80, c_last_name#81, ca_street_number#92, ca_street_name#93, ca_street_type#94, ca_suite_number#95, ca_city#96, ca_county#97, ca_state#98, ca_zip#99, ca_country#100, ca_gmt_offset#101, ca_location_type#102, ctr_total_return#3]"]
	2 [label="nodeID(2) SortMergeJoin [c_current_addr_sk#76], [ca_address_sk#90], Inner"]
	3 [label="nodeID(3) Sort [c_current_addr_sk#76 ASC NULLS FIRST], false, 0"]
	4 [label="nodeID(4) Exchange hashpartitioning(c_current_addr_sk#76, 200), ENSURE_REQUIREMENTS, [plan_id=223]"]
	5 [label="nodeID(5) Project [ctr_total_return#3, c_customer_id#73, c_current_addr_sk#76, c_salutation#79, c_first_name#80, c_last_name#81]"]
	6 [label="nodeID(6) SortMergeJoin [ctr_customer_sk#1], [c_customer_sk#72], Inner"]
	7 [label="nodeID(7) Sort [ctr_customer_sk#1 ASC NULLS FIRST], false, 0"]
	8 [label="nodeID(8) Exchange hashpartitioning(ctr_customer_sk#1, 200), ENSURE_REQUIREMENTS, [plan_id=215]"]
	9 [label="nodeID(9) Project [ctr_customer_sk#1, ctr_total_return#3]"]
	10 [label="nodeID(10) SortMergeJoin [ctr_state#2], [ctr_state#2#127], Inner, (ctr_total_return#3 > (avg(ctr_total_return) * 1.2)#108)"]
	11 [label="nodeID(11) Sort [ctr_state#2 ASC NULLS FIRST], false, 0"]
	12 [label="nodeID(12) Exchange hashpartitioning(ctr_state#2, 200), ENSURE_REQUIREMENTS, [plan_id=208]"]
	13 [label="nodeID(13) Filter isnotnull(ctr_total_return#3)"]
	14 [label="nodeID(14) HashAggregate(keys=[cr_returning_customer_sk#11, ca_state#67], functions=[sum(cr_return_amt_inc_tax#24)])"]
	15 [label="nodeID(15) Exchange hashpartitioning(cr_returning_customer_sk#11, ca_state#67, 200), ENSURE_REQUIREMENTS, [plan_id=187]"]
	16 [label="nodeID(16) HashAggregate(keys=[cr_returning_customer_sk#11, ca_state#67], functions=[partial_sum(cr_return_amt_inc_tax#24)])"]
	17 [label="nodeID(17) Project [cr_returning_customer_sk#11, cr_return_amt_inc_tax#24, ca_state#67]"]
	18 [label="nodeID(18) BroadcastHashJoin [cr_returning_addr_sk#14], [ca_address_sk#59], Inner, BuildRight, false"]
	19 [label="nodeID(19) Project [cr_returning_customer_sk#11, cr_returning_addr_sk#14, cr_return_amt_inc_tax#24]"]
	20 [label="nodeID(20) BroadcastHashJoin [cr_returned_date_sk#4], [d_date_sk#31], Inner, BuildRight, false"]
	21 [label="nodeID(21) Filter ((isnotnull(cr_returned_date_sk#4) AND isnotnull(cr_returning_addr_sk#14)) AND isnotnull(cr_returning_customer_sk#11))"]
	22 [label="nodeID(22) FileScan parquet tpcds_500_parquet.catalog_returns[cr_returned_date_sk#4,cr_returning_customer_sk#11,cr_returning_addr_sk#14,cr_return_amt_inc_tax#24"]
	23 [label="nodeID(23) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=178]"]
	24 [label="nodeID(24) Project [d_date_sk#31]"]
	25 [label="nodeID(25) Filter ((isnotnull(d_year#37) AND (d_year#37 = 2000)) AND isnotnull(d_date_sk#31))"]
	26 [label="nodeID(26) FileScan parquet tpcds_500_parquet.date_dim[d_date_sk#31,d_year#37"]
	27 [label="nodeID(27) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=182]"]
	28 [label="nodeID(28) Filter (isnotnull(ca_address_sk#59) AND isnotnull(ca_state#67))"]
	29 [label="nodeID(29) FileScan parquet tpcds_500_parquet.customer_address[ca_address_sk#59,ca_state#67"]
	30 [label="nodeID(30) Sort [ctr_state#2#127 ASC NULLS FIRST], false, 0"]
	31 [label="nodeID(31) Filter isnotnull((avg(ctr_total_return) * 1.2)#108)"]
	32 [label="nodeID(32) HashAggregate(keys=[ctr_state#2], functions=[avg(ctr_total_return#3)])"]
	33 [label="nodeID(33) Exchange hashpartitioning(ctr_state#2, 200), ENSURE_REQUIREMENTS, [plan_id=203]"]
	34 [label="nodeID(34) HashAggregate(keys=[ctr_state#2], functions=[partial_avg(ctr_total_return#3)])"]
	35 [label="nodeID(35) HashAggregate(keys=[cr_returning_customer_sk#11, ca_state#67], functions=[sum(cr_return_amt_inc_tax#24)])"]
	36 [label="nodeID(36) Exchange hashpartitioning(cr_returning_customer_sk#11, ca_state#67, 200), ENSURE_REQUIREMENTS, [plan_id=199]"]
	37 [label="nodeID(37) HashAggregate(keys=[cr_returning_customer_sk#11, ca_state#67], functions=[partial_sum(cr_return_amt_inc_tax#24)])"]
	38 [label="nodeID(38) Project [cr_returning_customer_sk#11, cr_return_amt_inc_tax#24, ca_state#67]"]
	39 [label="nodeID(39) BroadcastHashJoin [cr_returning_addr_sk#14], [ca_address_sk#59], Inner, BuildRight, false"]
	40 [label="nodeID(40) Project [cr_returning_customer_sk#11, cr_returning_addr_sk#14, cr_return_amt_inc_tax#24]"]
	41 [label="nodeID(41) BroadcastHashJoin [cr_returned_date_sk#4], [d_date_sk#31], Inner, BuildRight, false"]
	42 [label="nodeID(42) Filter (isnotnull(cr_returned_date_sk#4) AND isnotnull(cr_returning_addr_sk#14))"]
	43 [label="nodeID(43) FileScan parquet tpcds_500_parquet.catalog_returns[cr_returned_date_sk#4,cr_returning_customer_sk#11,cr_returning_addr_sk#14,cr_return_amt_inc_tax#24"]
	44 [label="nodeID(44) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=190]"]
	45 [label="nodeID(45) Project [d_date_sk#31]"]
	46 [label="nodeID(46) Filter ((isnotnull(d_year#37) AND (d_year#37 = 2000)) AND isnotnull(d_date_sk#31))"]
	47 [label="nodeID(47) FileScan parquet tpcds_500_parquet.date_dim[d_date_sk#31,d_year#37"]
	48 [label="nodeID(48) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=194]"]
	49 [label="nodeID(49) Filter (isnotnull(ca_address_sk#59) AND isnotnull(ca_state#67))"]
	50 [label="nodeID(50) FileScan parquet tpcds_500_parquet.customer_address[ca_address_sk#59,ca_state#67"]
	51 [label="nodeID(51) Sort [c_customer_sk#72 ASC NULLS FIRST], false, 0"]
	52 [label="nodeID(52) Exchange hashpartitioning(c_customer_sk#72, 200), ENSURE_REQUIREMENTS, [plan_id=216]"]
	53 [label="nodeID(53) Filter (isnotnull(c_customer_sk#72) AND isnotnull(c_current_addr_sk#76))"]
	54 [label="nodeID(54) FileScan parquet tpcds_500_parquet.customer[c_customer_sk#72,c_customer_id#73,c_current_addr_sk#76,c_salutation#79,c_first_name#80,c_last_name#81"]
	55 [label="nodeID(55) Sort [ca_address_sk#90 ASC NULLS FIRST], false, 0"]
	56 [label="nodeID(56) Exchange hashpartitioning(ca_address_sk#90, 200), ENSURE_REQUIREMENTS, [plan_id=224]"]
	57 [label="nodeID(57) Filter ((isnotnull(ca_state#98) AND (ca_state#98 = GA)) AND isnotnull(ca_address_sk#90))"]
	58 [label="nodeID(58) FileScan parquet tpcds_500_parquet.customer_address[ca_address_sk#90,ca_street_number#92,ca_street_name#93,ca_street_type#94,ca_suite_number#95,ca_city#96,ca_county#97,ca_state#98,ca_zip#99,ca_country#100,ca_gmt_offset#101,ca_location_type#102"]
	1 -> 0
	2 -> 1
	3 -> 2
	4 -> 3
	5 -> 4
	6 -> 5
	7 -> 6
	8 -> 7
	9 -> 8
	10 -> 9
	11 -> 10
	12 -> 11
	13 -> 12
	14 -> 13
	15 -> 14
	16 -> 15
	17 -> 16
	18 -> 17
	19 -> 18
	20 -> 19
	21 -> 20
	22 -> 21
	23 -> 20
	24 -> 23
	25 -> 24
	26 -> 25
	27 -> 18
	28 -> 27
	29 -> 28
	30 -> 10
	31 -> 30
	32 -> 31
	33 -> 32
	34 -> 33
	35 -> 34
	36 -> 35
	37 -> 36
	38 -> 37
	39 -> 38
	40 -> 39
	41 -> 40
	42 -> 41
	43 -> 42
	44 -> 41
	45 -> 44
	46 -> 45
	47 -> 46
	48 -> 39
	49 -> 48
	50 -> 49
	51 -> 6
	52 -> 51
	53 -> 52
	54 -> 53
	55 -> 2
	56 -> 55
	57 -> 56
	58 -> 57
}
