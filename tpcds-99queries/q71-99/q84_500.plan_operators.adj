// The Round Table
digraph {
	0 [label="nodeID(0) "]
	1 [label="nodeID(1) Project [c_customer_id#3 AS customer_id#0, c_customer_id#3]"]
	2 [label="nodeID(2) SortMergeJoin [cd_demo_sk#33], [sr_cdemo_sk#54], Inner"]
	3 [label="nodeID(3) Sort [cd_demo_sk#33 ASC NULLS FIRST], false, 0"]
	4 [label="nodeID(4) Exchange hashpartitioning(cd_demo_sk#33, 200), ENSURE_REQUIREMENTS, [plan_id=122]"]
	5 [label="nodeID(5) Project [c_customer_id#3, cd_demo_sk#33]"]
	6 [label="nodeID(6) BroadcastHashJoin [hd_income_band_sk#43], [ib_income_band_sk#47], Inner, BuildRight, false"]
	7 [label="nodeID(7) Project [c_customer_id#3, cd_demo_sk#33, hd_income_band_sk#43]"]
	8 [label="nodeID(8) BroadcastHashJoin [c_current_hdemo_sk#5], [hd_demo_sk#42], Inner, BuildRight, false"]
	9 [label="nodeID(9) Project [c_customer_id#3, c_current_hdemo_sk#5, cd_demo_sk#33]"]
	10 [label="nodeID(10) BroadcastHashJoin [c_current_cdemo_sk#4], [cd_demo_sk#33], Inner, BuildRight, false"]
	11 [label="nodeID(11) Project [c_customer_id#3, c_current_cdemo_sk#4, c_current_hdemo_sk#5]"]
	12 [label="nodeID(12) BroadcastHashJoin [c_current_addr_sk#6], [ca_address_sk#20], Inner, BuildRight, false"]
	13 [label="nodeID(13) Filter ((isnotnull(c_current_addr_sk#6) AND isnotnull(c_current_cdemo_sk#4)) AND isnotnull(c_current_hdemo_sk#5))"]
	14 [label="nodeID(14) FileScan parquet tpcds_500_parquet.customer[c_customer_id#3,c_current_cdemo_sk#4,c_current_hdemo_sk#5,c_current_addr_sk#6"]
	15 [label="nodeID(15) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=105]"]
	16 [label="nodeID(16) Project [ca_address_sk#20]"]
	17 [label="nodeID(17) Filter ((isnotnull(ca_city#26) AND (ca_city#26 = Edgewood)) AND isnotnull(ca_address_sk#20))"]
	18 [label="nodeID(18) FileScan parquet tpcds_500_parquet.customer_address[ca_address_sk#20,ca_city#26"]
	19 [label="nodeID(19) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=109]"]
	20 [label="nodeID(20) Filter isnotnull(cd_demo_sk#33)"]
	21 [label="nodeID(21) FileScan parquet tpcds_500_parquet.customer_demographics[cd_demo_sk#33"]
	22 [label="nodeID(22) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=113]"]
	23 [label="nodeID(23) Filter (isnotnull(hd_demo_sk#42) AND isnotnull(hd_income_band_sk#43))"]
	24 [label="nodeID(24) FileScan parquet tpcds_500_parquet.household_demographics[hd_demo_sk#42,hd_income_band_sk#43"]
	25 [label="nodeID(25) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=117]"]
	26 [label="nodeID(26) Project [ib_income_band_sk#47]"]
	27 [label="nodeID(27) Filter ((((isnotnull(ib_lower_bound#48) AND isnotnull(ib_upper_bound#49)) AND (ib_lower_bound#48 >= 38128)) AND (ib_upper_bound#49 <= 88128)) AND isnotnull(ib_income_band_sk#47))"]
	28 [label="nodeID(28) FileScan parquet tpcds_500_parquet.income_band[ib_income_band_sk#47,ib_lower_bound#48,ib_upper_bound#49"]
	29 [label="nodeID(29) Sort [sr_cdemo_sk#54 ASC NULLS FIRST], false, 0"]
	30 [label="nodeID(30) Exchange hashpartitioning(sr_cdemo_sk#54, 200), ENSURE_REQUIREMENTS, [plan_id=123]"]
	31 [label="nodeID(31) Filter isnotnull(sr_cdemo_sk#54)"]
	32 [label="nodeID(32) FileScan parquet tpcds_500_parquet.store_returns[sr_cdemo_sk#54"]
	1 -> 0
	2 -> 1
	3 -> 2
	4 -> 3
	5 -> 4
	6 -> 5
	7 -> 6
	8 -> 7
	9 -> 8
	10 -> 9
	11 -> 10
	12 -> 11
	13 -> 12
	14 -> 13
	15 -> 12
	16 -> 15
	17 -> 16
	18 -> 17
	19 -> 10
	20 -> 19
	21 -> 20
	22 -> 8
	23 -> 22
	24 -> 23
	25 -> 6
	26 -> 25
	27 -> 26
	28 -> 27
	29 -> 2
	30 -> 29
	31 -> 30
	32 -> 31
}
