// The Round Table
digraph {
	0 [label="nodeID(0) "]
	1 [label="nodeID(1) TakeOrderedAndProject(limit=100, orderBy=[(sum_sales#0 - avg_monthly_sales#1) ASC NULLS FIRST,s_store_name#80 ASC NULLS FIRST], output=[i_category#14,i_class#12,i_brand#10,s_store_name#80,s_company_name#92,d_moy#55,sum_sales#0,avg_monthly_sales#1])"]
	2 [label="nodeID(2) Project [i_category#14, i_class#12, i_brand#10, s_store_name#80, s_company_name#92, d_moy#55, sum_sales#0, avg_monthly_sales#1]"]
	3 [label="nodeID(3) Filter CASE WHEN NOT (avg_monthly_sales#1 = 0.0) THEN ((abs((sum_sales#0 - avg_monthly_sales#1)) / avg_monthly_sales#1) > 0.1) END"]
	4 [label="nodeID(4) Window [avg(_w0#111) windowspecdefinition(i_category#14, i_brand#10, s_store_name#80, s_company_name#92, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#1], [i_category#14, i_brand#10, s_store_name#80, s_company_name#92]"]
	5 [label="nodeID(5) Sort [i_category#14 ASC NULLS FIRST, i_brand#10 ASC NULLS FIRST, s_store_name#80 ASC NULLS FIRST, s_company_name#92 ASC NULLS FIRST], false, 0"]
	6 [label="nodeID(6) Exchange hashpartitioning(i_category#14, i_brand#10, s_store_name#80, s_company_name#92, 200), ENSURE_REQUIREMENTS, [plan_id=109]"]
	7 [label="nodeID(7) HashAggregate(keys=[i_category#14, i_class#12, i_brand#10, s_store_name#80, s_company_name#92, d_moy#55], functions=[sum(ss_sales_price#37)])"]
	8 [label="nodeID(8) Exchange hashpartitioning(i_category#14, i_class#12, i_brand#10, s_store_name#80, s_company_name#92, d_moy#55, 200), ENSURE_REQUIREMENTS, [plan_id=106]"]
	9 [label="nodeID(9) HashAggregate(keys=[i_category#14, i_class#12, i_brand#10, s_store_name#80, s_company_name#92, d_moy#55], functions=[partial_sum(ss_sales_price#37)])"]
	10 [label="nodeID(10) Project [i_brand#10, i_class#12, i_category#14, ss_sales_price#37, d_moy#55, s_store_name#80, s_company_name#92]"]
	11 [label="nodeID(11) BroadcastHashJoin [ss_store_sk#31], [s_store_sk#75], Inner, BuildRight, false"]
	12 [label="nodeID(12) Project [i_brand#10, i_class#12, i_category#14, ss_store_sk#31, ss_sales_price#37, d_moy#55]"]
	13 [label="nodeID(13) BroadcastHashJoin [ss_sold_date_sk#24], [d_date_sk#47], Inner, BuildRight, false"]
	14 [label="nodeID(14) Project [i_brand#10, i_class#12, i_category#14, ss_sold_date_sk#24, ss_store_sk#31, ss_sales_price#37]"]
	15 [label="nodeID(15) BroadcastHashJoin [i_item_sk#2], [ss_item_sk#26], Inner, BuildLeft, false"]
	16 [label="nodeID(16) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=93]"]
	17 [label="nodeID(17) Filter (((i_category#14 IN (Books,Electronics,Sports) AND i_class#12 IN (computers,stereo,football)) OR (i_category#14 IN (Men,Jewelry,Women) AND i_class#12 IN (shirts,birdal,dresses))) AND isnotnull(i_item_sk#2))"]
	18 [label="nodeID(18) FileScan parquet tpcds_100_parquet.item[i_item_sk#2,i_brand#10,i_class#12,i_category#14]"]
	19 [label="nodeID(19) Filter ((isnotnull(ss_item_sk#26) AND isnotnull(ss_sold_date_sk#24)) AND isnotnull(ss_store_sk#31))"]
	20 [label="nodeID(20) FileScan parquet tpcds_100_parquet.store_sales[ss_sold_date_sk#24,ss_item_sk#26,ss_store_sk#31,ss_sales_price#37]"]
	21 [label="nodeID(21) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=97]"]
	22 [label="nodeID(22) Project [d_date_sk#47, d_moy#55]"]
	23 [label="nodeID(23) Filter ((isnotnull(d_year#53) AND (d_year#53 = 1999)) AND isnotnull(d_date_sk#47))"]
	24 [label="nodeID(24) FileScan parquet tpcds_100_parquet.date_dim[d_date_sk#47,d_year#53,d_moy#55]"]
	25 [label="nodeID(25) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=101]"]
	26 [label="nodeID(26) Filter isnotnull(s_store_sk#75)"]
	27 [label="nodeID(27) FileScan parquet tpcds_100_parquet.store[s_store_sk#75,s_store_name#80,s_company_name#92]"]
	1 -> 0
	2 -> 1
	3 -> 2
	4 -> 3
	5 -> 4
	6 -> 5
	7 -> 6
	8 -> 7
	9 -> 8
	10 -> 9
	11 -> 10
	12 -> 11
	13 -> 12
	14 -> 13
	15 -> 14
	16 -> 15
	17 -> 16
	18 -> 17
	19 -> 15
	20 -> 19
	21 -> 13
	22 -> 21
	23 -> 22
	24 -> 23
	25 -> 11
	26 -> 25
	27 -> 26
}
