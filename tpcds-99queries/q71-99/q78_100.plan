== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- TakeOrderedAndProject(limit=100, orderBy=[ss_sold_year#17 ASC NULLS FIRST,ss_item_sk#170 ASC NULLS FIRST,ss_customer_sk#171 ASC NULLS FIRST,ss_qty#18L DESC NULLS LAST,ss_wc#19 DESC NULLS LAST,ss_sp#20 DESC NULLS LAST,other_chan_qty#4L ASC NULLS FIRST,other_chan_wholesale_cost#5 ASC NULLS FIRST,other_chan_sales_price#6 ASC NULLS FIRST,round((cast(ss_qty#18L as double) / cast(coalesce((ws_qty#9L + cs_qty#14L), 1) as double)), 2) ASC NULLS FIRST], output=[ss_sold_year#17,ss_item_sk#170,ss_customer_sk#171,ratio#0,store_qty#1L,store_wholesale_cost#2,store_sales_price#3,other_chan_qty#4L,other_chan_wholesale_cost#5,other_chan_sales_price#6])
   +- Project [ss_sold_year#17, ss_item_sk#170, ss_customer_sk#171, round((cast(ss_qty#18L as double) / cast((coalesce(ws_qty#9L, 0) + coalesce(cs_qty#14L, 0)) as double)), 2) AS ratio#0, ss_qty#18L AS store_qty#1L, ss_wc#19 AS store_wholesale_cost#2, ss_sp#20 AS store_sales_price#3, (coalesce(ws_qty#9L, 0) + coalesce(cs_qty#14L, 0)) AS other_chan_qty#4L, (coalesce(ws_wc#10, 0.0) + coalesce(cs_wc#15, 0.0)) AS other_chan_wholesale_cost#5, (coalesce(ws_sp#11, 0.0) + coalesce(cs_sp#16, 0.0)) AS other_chan_sales_price#6, ss_qty#18L, ss_wc#19, ss_sp#20, ws_qty#9L, cs_qty#14L]
      +- Filter ((coalesce(ws_qty#9L, 0) > 0) OR (coalesce(cs_qty#14L, 0) > 0))
         +- SortMergeJoin [ss_sold_year#17, ss_item_sk#170, ss_customer_sk#171], [cs_sold_year#12, cs_item_sk#122, cs_customer_sk#13], LeftOuter
            :- Project [ss_sold_year#17, ss_item_sk#170, ss_customer_sk#171, ss_qty#18L, ss_wc#19, ss_sp#20, ws_qty#9L, ws_wc#10, ws_sp#11]
            :  +- SortMergeJoin [ss_sold_year#17, ss_item_sk#170, ss_customer_sk#171], [ws_sold_year#7, ws_item_sk#24, ws_customer_sk#8], LeftOuter
            :     :- Sort [ss_sold_year#17 ASC NULLS FIRST, ss_item_sk#170 ASC NULLS FIRST, ss_customer_sk#171 ASC NULLS FIRST], false, 0
            :     :  +- HashAggregate(keys=[d_year#245, ss_item_sk#170, ss_customer_sk#171], functions=[sum(ss_quantity#178), sum(ss_wholesale_cost#179), sum(ss_sales_price#181)])
            :     :     +- Exchange hashpartitioning(d_year#245, ss_item_sk#170, ss_customer_sk#171, 200), ENSURE_REQUIREMENTS, [plan_id=220]
            :     :        +- HashAggregate(keys=[d_year#245, ss_item_sk#170, ss_customer_sk#171], functions=[partial_sum(ss_quantity#178), partial_sum(ss_wholesale_cost#179), partial_sum(ss_sales_price#181)])
            :     :           +- Project [ss_item_sk#170, ss_customer_sk#171, ss_quantity#178, ss_wholesale_cost#179, ss_sales_price#181, d_year#245]
            :     :              +- BroadcastHashJoin [ss_sold_date_sk#168], [d_date_sk#239], Inner, BuildRight, false
            :     :                 :- Project [ss_sold_date_sk#168, ss_item_sk#170, ss_customer_sk#171, ss_quantity#178, ss_wholesale_cost#179, ss_sales_price#181]
            :     :                 :  +- Filter isnull(sr_ticket_number#200L)
            :     :                 :     +- SortMergeJoin [ss_ticket_number#177L, ss_item_sk#170], [sr_ticket_number#200L, sr_item_sk#193], LeftOuter
            :     :                 :        :- Sort [ss_ticket_number#177L ASC NULLS FIRST, ss_item_sk#170 ASC NULLS FIRST], false, 0
            :     :                 :        :  +- Exchange hashpartitioning(ss_ticket_number#177L, ss_item_sk#170, 200), ENSURE_REQUIREMENTS, [plan_id=207]
            :     :                 :        :     +- Filter isnotnull(ss_sold_date_sk#168)
            :     :                 :        :        +- FileScan parquet tpcds_100_parquet.store_sales[ss_sold_date_sk#168,ss_item_sk#170,ss_customer_sk#171,ss_ticket_number#177L,ss_quantity#178,ss_wholesale_cost#179,ss_sales_price#181] Batched: true, DataFilters: [isnotnull(ss_sold_date_sk#168)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_100/tpcds_parquet/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_sold_date_sk)], ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_ticket_number:bigint,ss_quantity:...
            :     :                 :        +- Sort [sr_ticket_number#200L ASC NULLS FIRST, sr_item_sk#193 ASC NULLS FIRST], false, 0
            :     :                 :           +- Exchange hashpartitioning(sr_ticket_number#200L, sr_item_sk#193, 200), ENSURE_REQUIREMENTS, [plan_id=208]
            :     :                 :              +- Filter (isnotnull(sr_ticket_number#200L) AND isnotnull(sr_item_sk#193))
            :     :                 :                 +- FileScan parquet tpcds_100_parquet.store_returns[sr_item_sk#193,sr_ticket_number#200L] Batched: true, DataFilters: [isnotnull(sr_ticket_number#200L), isnotnull(sr_item_sk#193)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_100/tpcds_parquet/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>
            :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=215]
            :     :                    +- Filter ((isnotnull(d_year#245) AND (d_year#245 = 2000)) AND isnotnull(d_date_sk#239))
            :     :                       +- FileScan parquet tpcds_100_parquet.date_dim[d_date_sk#239,d_year#245] Batched: true, DataFilters: [isnotnull(d_year#245), (d_year#245 = 2000), isnotnull(d_date_sk#239)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_100/tpcds_parquet/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
            :     +- Sort [ws_sold_year#7 ASC NULLS FIRST, ws_item_sk#24 ASC NULLS FIRST, ws_customer_sk#8 ASC NULLS FIRST], false, 0
            :        +- HashAggregate(keys=[d_year#85, ws_item_sk#24, ws_bill_customer_sk#25], functions=[sum(ws_quantity#39), sum(ws_wholesale_cost#40), sum(ws_sales_price#42)])
            :           +- Exchange hashpartitioning(d_year#85, ws_item_sk#24, ws_bill_customer_sk#25, 200), ENSURE_REQUIREMENTS, [plan_id=236]
            :              +- HashAggregate(keys=[d_year#85, ws_item_sk#24, ws_bill_customer_sk#25], functions=[partial_sum(ws_quantity#39), partial_sum(ws_wholesale_cost#40), partial_sum(ws_sales_price#42)])
            :                 +- Project [ws_item_sk#24, ws_bill_customer_sk#25, ws_quantity#39, ws_wholesale_cost#40, ws_sales_price#42, d_year#85]
            :                    +- BroadcastHashJoin [ws_sold_date_sk#21], [d_date_sk#79], Inner, BuildRight, false
            :                       :- Project [ws_sold_date_sk#21, ws_item_sk#24, ws_bill_customer_sk#25, ws_quantity#39, ws_wholesale_cost#40, ws_sales_price#42]
            :                       :  +- Filter isnull(wr_order_number#68L)
            :                       :     +- SortMergeJoin [ws_order_number#38L, ws_item_sk#24], [wr_order_number#68L, wr_item_sk#57], LeftOuter
            :                       :        :- Sort [ws_order_number#38L ASC NULLS FIRST, ws_item_sk#24 ASC NULLS FIRST], false, 0
            :                       :        :  +- Exchange hashpartitioning(ws_order_number#38L, ws_item_sk#24, 200), ENSURE_REQUIREMENTS, [plan_id=223]
            :                       :        :     +- Filter ((isnotnull(ws_sold_date_sk#21) AND isnotnull(ws_item_sk#24)) AND isnotnull(ws_bill_customer_sk#25))
            :                       :        :        +- FileScan parquet tpcds_100_parquet.web_sales[ws_sold_date_sk#21,ws_item_sk#24,ws_bill_customer_sk#25,ws_order_number#38L,ws_quantity#39,ws_wholesale_cost#40,ws_sales_price#42] Batched: true, DataFilters: [isnotnull(ws_sold_date_sk#21), isnotnull(ws_item_sk#24), isnotnull(ws_bill_customer_sk#25)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_100/tpcds_parquet/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_order_number:bigint,ws_quant...
            :                       :        +- Sort [wr_order_number#68L ASC NULLS FIRST, wr_item_sk#57 ASC NULLS FIRST], false, 0
            :                       :           +- Exchange hashpartitioning(wr_order_number#68L, wr_item_sk#57, 200), ENSURE_REQUIREMENTS, [plan_id=224]
            :                       :              +- Filter (isnotnull(wr_order_number#68L) AND isnotnull(wr_item_sk#57))
            :                       :                 +- FileScan parquet tpcds_100_parquet.web_returns[wr_item_sk#57,wr_order_number#68L] Batched: true, DataFilters: [isnotnull(wr_order_number#68L), isnotnull(wr_item_sk#57)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_100/tpcds_parquet/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)], ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint>
            :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=231]
            :                          +- Filter ((isnotnull(d_date_sk#79) AND (d_year#85 = 2000)) AND isnotnull(d_year#85))
            :                             +- FileScan parquet tpcds_100_parquet.date_dim[d_date_sk#79,d_year#85] Batched: true, DataFilters: [isnotnull(d_date_sk#79), (d_year#85 = 2000), isnotnull(d_year#85)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_100/tpcds_parquet/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk), EqualTo(d_year,2000), IsNotNull(d_year)], ReadSchema: struct<d_date_sk:int,d_year:int>
            +- Sort [cs_sold_year#12 ASC NULLS FIRST, cs_item_sk#122 ASC NULLS FIRST, cs_customer_sk#13 ASC NULLS FIRST], false, 0
               +- HashAggregate(keys=[d_year#217, cs_item_sk#122, cs_bill_customer_sk#110], functions=[sum(cs_quantity#125), sum(cs_wholesale_cost#126), sum(cs_sales_price#128)])
                  +- Exchange hashpartitioning(d_year#217, cs_item_sk#122, cs_bill_customer_sk#110, 200), ENSURE_REQUIREMENTS, [plan_id=258]
                     +- HashAggregate(keys=[d_year#217, cs_item_sk#122, cs_bill_customer_sk#110], functions=[partial_sum(cs_quantity#125), partial_sum(cs_wholesale_cost#126), partial_sum(cs_sales_price#128)])
                        +- Project [cs_bill_customer_sk#110, cs_item_sk#122, cs_quantity#125, cs_wholesale_cost#126, cs_sales_price#128, d_year#217]
                           +- BroadcastHashJoin [cs_sold_date_sk#107], [d_date_sk#211], Inner, BuildRight, false
                              :- Project [cs_sold_date_sk#107, cs_bill_customer_sk#110, cs_item_sk#122, cs_quantity#125, cs_wholesale_cost#126, cs_sales_price#128]
                              :  +- Filter isnull(cr_order_number#157L)
                              :     +- SortMergeJoin [cs_order_number#124L, cs_item_sk#122], [cr_order_number#157L, cr_item_sk#143], LeftOuter
                              :        :- Sort [cs_order_number#124L ASC NULLS FIRST, cs_item_sk#122 ASC NULLS FIRST], false, 0
                              :        :  +- Exchange hashpartitioning(cs_order_number#124L, cs_item_sk#122, 200), ENSURE_REQUIREMENTS, [plan_id=245]
                              :        :     +- Filter ((isnotnull(cs_sold_date_sk#107) AND isnotnull(cs_item_sk#122)) AND isnotnull(cs_bill_customer_sk#110))
                              :        :        +- FileScan parquet tpcds_100_parquet.catalog_sales[cs_sold_date_sk#107,cs_bill_customer_sk#110,cs_item_sk#122,cs_order_number#124L,cs_quantity#125,cs_wholesale_cost#126,cs_sales_price#128] Batched: true, DataFilters: [isnotnull(cs_sold_date_sk#107), isnotnull(cs_item_sk#122), isnotnull(cs_bill_customer_sk#110)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_100/tpcds_parquet/catalog_sa..., PartitionFilters: [], PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)], ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_order_number:bigint,cs_quant...
                              :        +- Sort [cr_order_number#157L ASC NULLS FIRST, cr_item_sk#143 ASC NULLS FIRST], false, 0
                              :           +- Exchange hashpartitioning(cr_order_number#157L, cr_item_sk#143, 200), ENSURE_REQUIREMENTS, [plan_id=246]
                              :              +- Filter (isnotnull(cr_order_number#157L) AND isnotnull(cr_item_sk#143))
                              :                 +- FileScan parquet tpcds_100_parquet.catalog_returns[cr_item_sk#143,cr_order_number#157L] Batched: true, DataFilters: [isnotnull(cr_order_number#157L), isnotnull(cr_item_sk#143)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_100/tpcds_parquet/catalog_re..., PartitionFilters: [], PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)], ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint>
                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=253]
                                 +- Filter ((isnotnull(d_date_sk#211) AND (d_year#217 = 2000)) AND isnotnull(d_year#217))
                                    +- FileScan parquet tpcds_100_parquet.date_dim[d_date_sk#211,d_year#217] Batched: true, DataFilters: [isnotnull(d_date_sk#211), (d_year#217 = 2000), isnotnull(d_year#217)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_100/tpcds_parquet/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date_sk), EqualTo(d_year,2000), IsNotNull(d_year)], ReadSchema: struct<d_date_sk:int,d_year:int>


