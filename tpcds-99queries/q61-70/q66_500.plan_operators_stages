// The Round Table
digraph {
	node [shape=box]
	2 [label="NormalStage (end_node_id 2): length of beginNodesToChains is 2
[2,0,0,4,0,0,0,2]
Chain 0 is : HashAggregate(keys=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, d_year#142], functions=[sum(CASE WHEN (d_moy#144 = 1) THEN (ws_ext_sales_price#111 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 2) THEN (ws_ext_sales_price#111 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 3) THEN (ws_ext_sales_price#111 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 4) THEN (ws_ext_sales_price#111 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 5) THEN (ws_ext_sales_price#111 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 6) THEN (ws_ext_sales_price#111 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 7) THEN (ws_ext_sales_price#111 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 8) THEN (ws_ext_sales_price#111 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 9) THEN (ws_ext_sales_price#111 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 10) THEN (ws_ext_sales_price#111 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 11) THEN (ws_ext_sales_price#111 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 12) THEN (ws_ext_sales_price#111 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 1) THEN (ws_net_paid#117 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 2) THEN (ws_net_paid#117 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 3) THEN (ws_net_paid#117 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 4) THEN (ws_net_paid#117 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 5) THEN (ws_net_paid#117 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 6) THEN (ws_net_paid#117 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 7) THEN (ws_net_paid#117 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 8) THEN (ws_net_paid#117 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 9) THEN (ws_net_paid#117 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 10) THEN (ws_net_paid#117 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 11) THEN (ws_net_paid#117 * cast(ws_quantity#106 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#144 = 12) THEN (ws_net_paid#117 * cast(ws_quantity#106 as double)) ELSE 0.0 END)])
HashAggregate->Union->HashAggregate->ExchangeHashpartitioning
Chain 1 is : HashAggregate(keys=[w_warehouse_name#216, w_warehouse_sq_ft#217, w_city#222, w_county#223, w_state#224, w_country#226, d_year#234], functions=[sum(CASE WHEN (d_moy#236 = 1) THEN (cs_sales_price#201 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 2) THEN (cs_sales_price#201 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 3) THEN (cs_sales_price#201 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 4) THEN (cs_sales_price#201 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 5) THEN (cs_sales_price#201 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 6) THEN (cs_sales_price#201 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 7) THEN (cs_sales_price#201 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 8) THEN (cs_sales_price#201 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 9) THEN (cs_sales_price#201 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 10) THEN (cs_sales_price#201 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 11) THEN (cs_sales_price#201 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 12) THEN (cs_sales_price#201 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 1) THEN (cs_net_paid_inc_tax#210 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 2) THEN (cs_net_paid_inc_tax#210 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 3) THEN (cs_net_paid_inc_tax#210 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 4) THEN (cs_net_paid_inc_tax#210 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 5) THEN (cs_net_paid_inc_tax#210 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 6) THEN (cs_net_paid_inc_tax#210 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 7) THEN (cs_net_paid_inc_tax#210 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 8) THEN (cs_net_paid_inc_tax#210 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 9) THEN (cs_net_paid_inc_tax#210 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 10) THEN (cs_net_paid_inc_tax#210 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 11) THEN (cs_net_paid_inc_tax#210 * cast(cs_quantity#198 as double)) ELSE 0.0 END), sum(CASE WHEN (d_moy#236 = 12) THEN (cs_net_paid_inc_tax#210 * cast(cs_quantity#198 as double)) ELSE 0.0 END)])
HashAggregate->Union->HashAggregate->ExchangeHashpartitioning
"]
	0 [label="NormalStage (end_node_id 0): length of beginNodesToChains is 1
[1,0,0,1,0,0,0,0]
Chain 0 is : HashAggregate(keys=[w_warehouse_name#124, w_warehouse_sq_ft#125, w_city#130, w_county#131, w_state#132, w_country#134, ship_carriers#0, year#1], functions=[sum(jan_sales#2), sum(feb_sales#3), sum(mar_sales#4), sum(apr_sales#5), sum(may_sales#6), sum(jun_sales#7), sum(jul_sales#8), sum(aug_sales#9), sum(sep_sales#10), sum(oct_sales#11), sum(nov_sales#12), sum(dec_sales#13), sum((jan_sales#2 / cast(w_warehouse_sq_ft#125 as double))), sum((feb_sales#3 / cast(w_warehouse_sq_ft#125 as double))), sum((mar_sales#4 / cast(w_warehouse_sq_ft#125 as double))), sum((apr_sales#5 / cast(w_warehouse_sq_ft#125 as double))), sum((may_sales#6 / cast(w_warehouse_sq_ft#125 as double))), sum((jun_sales#7 / cast(w_warehouse_sq_ft#125 as double))), sum((jul_sales#8 / cast(w_warehouse_sq_ft#125 as double))), sum((aug_sales#9 / cast(w_warehouse_sq_ft#125 as double))), sum((sep_sales#10 / cast(w_warehouse_sq_ft#125 as double))), sum((oct_sales#11 / cast(w_warehouse_sq_ft#125 as double))), sum((nov_sales#12 / cast(w_warehouse_sq_ft#125 as double))), sum((dec_sales#13 / cast(w_warehouse_sq_ft#125 as double))), ... 12 more fields])
HashAggregate->TakeOrderedAndProject
"]
	2 -> 0
	18 [label="Broadcast stage(end_node_id 18): warehouse,10000FileScan->Filter->BroadcastExchange"]
	18 -> 6
	45 [label="Broadcast stage(end_node_id 45): warehouse,10000FileScan->Filter->BroadcastExchange"]
	45 -> 33
	21 [label="Broadcast stage(end_node_id 21): date_dim,10000FileScan->Filter->BroadcastExchange"]
	21 -> 6
	48 [label="Broadcast stage(end_node_id 48): date_dim,10000FileScan->Filter->BroadcastExchange"]
	48 -> 33
	24 [label="Broadcast stage(end_node_id 24): time_dim,10000FileScan->Filter->Project->BroadcastExchange"]
	24 -> 6
	51 [label="Broadcast stage(end_node_id 51): time_dim,10000FileScan->Filter->Project->BroadcastExchange"]
	51 -> 33
	28 [label="Broadcast stage(end_node_id 28): ship_mode,10000FileScan->Filter->Project->BroadcastExchange"]
	28 -> 6
	55 [label="Broadcast stage(end_node_id 55): ship_mode,10000FileScan->Filter->Project->BroadcastExchange"]
	55 -> 33
	6 [label="First stage (end_node_id 6): File Scan web_sales,5455.9FileScan->Filter->BroadcastHashJoin->Project->BroadcastHashJoin->Project->BroadcastHashJoin->Project->BroadcastHashJoin->Project->HashAggregate->ExchangeHashpartitioning"]
	6 -> 2
	33 [label="First stage (end_node_id 33): File Scan catalog_sales,11591.2FileScan->Filter->BroadcastHashJoin->Project->BroadcastHashJoin->Project->BroadcastHashJoin->Project->BroadcastHashJoin->Project->HashAggregate->ExchangeHashpartitioning"]
	33 -> 2
}
