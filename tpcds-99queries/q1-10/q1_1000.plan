== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- TakeOrderedAndProject(limit=100, orderBy=[c_customer_id#82 ASC NULLS FIRST], output=[c_customer_id#82])
   +- Project [c_customer_id#82]
      +- SortMergeJoin [ctr_customer_sk#1], [c_customer_sk#81], Inner
         :- Sort [ctr_customer_sk#1 ASC NULLS FIRST], false, 0
         :  +- Exchange hashpartitioning(ctr_customer_sk#1, 200), ENSURE_REQUIREMENTS, [plan_id=175]
         :     +- Project [ctr_customer_sk#1]
         :        +- BroadcastHashJoin [ctr_store_sk#2], [s_store_sk#52], Inner, BuildRight, false
         :           :- Project [ctr_customer_sk#1, ctr_store_sk#2]
         :           :  +- SortMergeJoin [ctr_store_sk#2], [ctr_store_sk#2#107], Inner, (ctr_total_return#3 > (avg(ctr_total_return) * 1.2)#103)
         :           :     :- Sort [ctr_store_sk#2 ASC NULLS FIRST], false, 0
         :           :     :  +- Exchange hashpartitioning(ctr_store_sk#2, 200), ENSURE_REQUIREMENTS, [plan_id=164]
         :           :     :     +- Filter isnotnull(ctr_total_return#3)
         :           :     :        +- HashAggregate(keys=[sr_customer_sk#7, sr_store_sk#11], functions=[sum(sr_return_amt#15)])
         :           :     :           +- Exchange hashpartitioning(sr_customer_sk#7, sr_store_sk#11, 200), ENSURE_REQUIREMENTS, [plan_id=147]
         :           :     :              +- HashAggregate(keys=[sr_customer_sk#7, sr_store_sk#11], functions=[partial_sum(sr_return_amt#15)])
         :           :     :                 +- Project [sr_customer_sk#7, sr_store_sk#11, sr_return_amt#15]
         :           :     :                    +- BroadcastHashJoin [sr_returned_date_sk#4], [d_date_sk#24], Inner, BuildRight, false
         :           :     :                       :- Filter ((isnotnull(sr_returned_date_sk#4) AND isnotnull(sr_store_sk#11)) AND isnotnull(sr_customer_sk#7))
         :           :     :                       :  +- FileScan parquet tpcds_1000_parquet.store_returns[sr_returned_date_sk#4,sr_customer_sk#7,sr_store_sk#11,sr_return_amt#15] Batched: true, DataFilters: [isnotnull(sr_returned_date_sk#4), isnotnull(sr_store_sk#11), isnotnull(sr_customer_sk#7)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_1000/tpcds_parquet/store_ret..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)], ReadSchema: struct<sr_returned_date_sk:int,sr_customer_sk:int,sr_store_sk:int,sr_return_amt:double>
         :           :     :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=142]
         :           :     :                          +- Project [d_date_sk#24]
         :           :     :                             +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))
         :           :     :                                +- FileScan parquet tpcds_1000_parquet.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2000), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_1000/tpcds_parquet/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :           :     +- Sort [ctr_store_sk#2#107 ASC NULLS FIRST], false, 0
         :           :        +- Filter isnotnull((avg(ctr_total_return) * 1.2)#103)
         :           :           +- HashAggregate(keys=[ctr_store_sk#2], functions=[avg(ctr_total_return#3)])
         :           :              +- Exchange hashpartitioning(ctr_store_sk#2, 200), ENSURE_REQUIREMENTS, [plan_id=159]
         :           :                 +- HashAggregate(keys=[ctr_store_sk#2], functions=[partial_avg(ctr_total_return#3)])
         :           :                    +- HashAggregate(keys=[sr_customer_sk#7, sr_store_sk#11], functions=[sum(sr_return_amt#15)])
         :           :                       +- Exchange hashpartitioning(sr_customer_sk#7, sr_store_sk#11, 200), ENSURE_REQUIREMENTS, [plan_id=155]
         :           :                          +- HashAggregate(keys=[sr_customer_sk#7, sr_store_sk#11], functions=[partial_sum(sr_return_amt#15)])
         :           :                             +- Project [sr_customer_sk#7, sr_store_sk#11, sr_return_amt#15]
         :           :                                +- BroadcastHashJoin [sr_returned_date_sk#4], [d_date_sk#24], Inner, BuildRight, false
         :           :                                   :- Filter (isnotnull(sr_returned_date_sk#4) AND isnotnull(sr_store_sk#11))
         :           :                                   :  +- FileScan parquet tpcds_1000_parquet.store_returns[sr_returned_date_sk#4,sr_customer_sk#7,sr_store_sk#11,sr_return_amt#15] Batched: true, DataFilters: [isnotnull(sr_returned_date_sk#4), isnotnull(sr_store_sk#11)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_1000/tpcds_parquet/store_ret..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk)], ReadSchema: struct<sr_returned_date_sk:int,sr_customer_sk:int,sr_store_sk:int,sr_return_amt:double>
         :           :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=150]
         :           :                                      +- Project [d_date_sk#24]
         :           :                                         +- Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))
         :           :                                            +- FileScan parquet tpcds_1000_parquet.date_dim[d_date_sk#24,d_year#30] Batched: true, DataFilters: [isnotnull(d_year#30), (d_year#30 = 2000), isnotnull(d_date_sk#24)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_1000/tpcds_parquet/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>
         :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=170]
         :              +- Project [s_store_sk#52]
         :                 +- Filter ((isnotnull(s_state#76) AND (s_state#76 = TN)) AND isnotnull(s_store_sk#52))
         :                    +- FileScan parquet tpcds_1000_parquet.store[s_store_sk#52,s_state#76] Batched: true, DataFilters: [isnotnull(s_state#76), (s_state#76 = TN), isnotnull(s_store_sk#52)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_1000/tpcds_parquet/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_state:string>
         +- Sort [c_customer_sk#81 ASC NULLS FIRST], false, 0
            +- Exchange hashpartitioning(c_customer_sk#81, 200), ENSURE_REQUIREMENTS, [plan_id=176]
               +- Filter isnotnull(c_customer_sk#81)
                  +- FileScan parquet tpcds_1000_parquet.customer[c_customer_sk#81,c_customer_id#82] Batched: true, DataFilters: [isnotnull(c_customer_sk#81)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_1000/tpcds_parquet/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_customer_id:string>


