// The Round Table
digraph {
	0 [label="nodeID(0) "]
	1 [label="nodeID(1) Project [c_customer_id#82]"]
	2 [label="nodeID(2) SortMergeJoin [ctr_customer_sk#1], [c_customer_sk#81], Inner"]
	3 [label="nodeID(3) Sort [ctr_customer_sk#1 ASC NULLS FIRST], false, 0"]
	4 [label="nodeID(4) Exchange hashpartitioning(ctr_customer_sk#1, 200), ENSURE_REQUIREMENTS, [plan_id=175]"]
	5 [label="nodeID(5) Project [ctr_customer_sk#1]"]
	6 [label="nodeID(6) BroadcastHashJoin [ctr_store_sk#2], [s_store_sk#52], Inner, BuildRight, false"]
	7 [label="nodeID(7) Project [ctr_customer_sk#1, ctr_store_sk#2]"]
	8 [label="nodeID(8) SortMergeJoin [ctr_store_sk#2], [ctr_store_sk#2#107], Inner, (ctr_total_return#3 > (avg(ctr_total_return) * 1.2)#103)"]
	9 [label="nodeID(9) Sort [ctr_store_sk#2 ASC NULLS FIRST], false, 0"]
	10 [label="nodeID(10) Exchange hashpartitioning(ctr_store_sk#2, 200), ENSURE_REQUIREMENTS, [plan_id=164]"]
	11 [label="nodeID(11) Filter isnotnull(ctr_total_return#3)"]
	12 [label="nodeID(12) HashAggregate(keys=[sr_customer_sk#7, sr_store_sk#11], functions=[sum(sr_return_amt#15)])"]
	13 [label="nodeID(13) Exchange hashpartitioning(sr_customer_sk#7, sr_store_sk#11, 200), ENSURE_REQUIREMENTS, [plan_id=147]"]
	14 [label="nodeID(14) HashAggregate(keys=[sr_customer_sk#7, sr_store_sk#11], functions=[partial_sum(sr_return_amt#15)])"]
	15 [label="nodeID(15) Project [sr_customer_sk#7, sr_store_sk#11, sr_return_amt#15]"]
	16 [label="nodeID(16) BroadcastHashJoin [sr_returned_date_sk#4], [d_date_sk#24], Inner, BuildRight, false"]
	17 [label="nodeID(17) Filter ((isnotnull(sr_returned_date_sk#4) AND isnotnull(sr_store_sk#11)) AND isnotnull(sr_customer_sk#7))"]
	18 [label="nodeID(18) FileScan parquet tpcds_500_parquet.store_returns[sr_returned_date_sk#4,sr_customer_sk#7,sr_store_sk#11,sr_return_amt#15"]
	19 [label="nodeID(19) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=142]"]
	20 [label="nodeID(20) Project [d_date_sk#24]"]
	21 [label="nodeID(21) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))"]
	22 [label="nodeID(22) FileScan parquet tpcds_500_parquet.date_dim[d_date_sk#24,d_year#30"]
	23 [label="nodeID(23) Sort [ctr_store_sk#2#107 ASC NULLS FIRST], false, 0"]
	24 [label="nodeID(24) Filter isnotnull((avg(ctr_total_return) * 1.2)#103)"]
	25 [label="nodeID(25) HashAggregate(keys=[ctr_store_sk#2], functions=[avg(ctr_total_return#3)])"]
	26 [label="nodeID(26) Exchange hashpartitioning(ctr_store_sk#2, 200), ENSURE_REQUIREMENTS, [plan_id=159]"]
	27 [label="nodeID(27) HashAggregate(keys=[ctr_store_sk#2], functions=[partial_avg(ctr_total_return#3)])"]
	28 [label="nodeID(28) HashAggregate(keys=[sr_customer_sk#7, sr_store_sk#11], functions=[sum(sr_return_amt#15)])"]
	29 [label="nodeID(29) Exchange hashpartitioning(sr_customer_sk#7, sr_store_sk#11, 200), ENSURE_REQUIREMENTS, [plan_id=155]"]
	30 [label="nodeID(30) HashAggregate(keys=[sr_customer_sk#7, sr_store_sk#11], functions=[partial_sum(sr_return_amt#15)])"]
	31 [label="nodeID(31) Project [sr_customer_sk#7, sr_store_sk#11, sr_return_amt#15]"]
	32 [label="nodeID(32) BroadcastHashJoin [sr_returned_date_sk#4], [d_date_sk#24], Inner, BuildRight, false"]
	33 [label="nodeID(33) Filter (isnotnull(sr_returned_date_sk#4) AND isnotnull(sr_store_sk#11))"]
	34 [label="nodeID(34) FileScan parquet tpcds_500_parquet.store_returns[sr_returned_date_sk#4,sr_customer_sk#7,sr_store_sk#11,sr_return_amt#15"]
	35 [label="nodeID(35) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=150]"]
	36 [label="nodeID(36) Project [d_date_sk#24]"]
	37 [label="nodeID(37) Filter ((isnotnull(d_year#30) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#24))"]
	38 [label="nodeID(38) FileScan parquet tpcds_500_parquet.date_dim[d_date_sk#24,d_year#30"]
	39 [label="nodeID(39) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=170]"]
	40 [label="nodeID(40) Project [s_store_sk#52]"]
	41 [label="nodeID(41) Filter ((isnotnull(s_state#76) AND (s_state#76 = TN)) AND isnotnull(s_store_sk#52))"]
	42 [label="nodeID(42) FileScan parquet tpcds_500_parquet.store[s_store_sk#52,s_state#76"]
	43 [label="nodeID(43) Sort [c_customer_sk#81 ASC NULLS FIRST], false, 0"]
	44 [label="nodeID(44) Exchange hashpartitioning(c_customer_sk#81, 200), ENSURE_REQUIREMENTS, [plan_id=176]"]
	45 [label="nodeID(45) Filter isnotnull(c_customer_sk#81)"]
	46 [label="nodeID(46) FileScan parquet tpcds_500_parquet.customer[c_customer_sk#81,c_customer_id#82"]
	1 -> 0
	2 -> 1
	3 -> 2
	4 -> 3
	5 -> 4
	6 -> 5
	7 -> 6
	8 -> 7
	9 -> 8
	10 -> 9
	11 -> 10
	12 -> 11
	13 -> 12
	14 -> 13
	15 -> 14
	16 -> 15
	17 -> 16
	18 -> 17
	19 -> 16
	20 -> 19
	21 -> 20
	22 -> 21
	23 -> 8
	24 -> 23
	25 -> 24
	26 -> 25
	27 -> 26
	28 -> 27
	29 -> 28
	30 -> 29
	31 -> 30
	32 -> 31
	33 -> 32
	34 -> 33
	35 -> 32
	36 -> 35
	37 -> 36
	38 -> 37
	39 -> 6
	40 -> 39
	41 -> 40
	42 -> 41
	43 -> 2
	44 -> 43
	45 -> 44
	46 -> 45
}
