// The Round Table
digraph {
	0 [label="nodeID(0) "]
	1 [label="nodeID(1) Project [CASE WHEN (Subquery subquery#0, [id=#26].count(1) > 74129) THEN Subquery subquery#1, [id=#43].avg(ss_ext_discount_amt) ELSE Subquery subquery#2, [id=#60].avg(ss_net_paid) END AS bucket1#3, CASE WHEN (Subquery subquery#4, [id=#77].count(1) > 122840) THEN Subquery subquery#5, [id=#94].avg(ss_ext_discount_amt) ELSE Subquery subquery#6, [id=#111].avg(ss_net_paid) END AS bucket2#7, CASE WHEN (Subquery subquery#8, [id=#128].count(1) > 56580) THEN Subquery subquery#9, [id=#145].avg(ss_ext_discount_amt) ELSE Subquery subquery#10, [id=#162].avg(ss_net_paid) END AS bucket3#11, CASE WHEN (Subquery subquery#12, [id=#179].count(1) > 10097) THEN Subquery subquery#13, [id=#196].avg(ss_ext_discount_amt) ELSE Subquery subquery#14, [id=#213].avg(ss_net_paid) END AS bucket4#15, CASE WHEN (Subquery subquery#16, [id=#230].count(1) > 165306) THEN Subquery subquery#17, [id=#247].avg(ss_ext_discount_amt) ELSE Subquery subquery#18, [id=#264].avg(ss_net_paid) END AS bucket5#19]"]
	2 [label="nodeID(2) Subquery subquery#0, [id=#26]"]
	3 [label="nodeID(3) AdaptiveSparkPlan isFinalPlan=false"]
	4 [label="nodeID(4) Project [named_struct(count(1), count(1)#47L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#50, avg(ss_net_paid), avg(ss_net_paid)#52) AS mergedValue#448]"]
	5 [label="nodeID(5) HashAggregate(keys=[], functions=[count(1), avg(ss_ext_discount_amt#38), avg(ss_net_paid#44)])"]
	6 [label="nodeID(6) Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=23]"]
	7 [label="nodeID(7) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(ss_ext_discount_amt#38), partial_avg(ss_net_paid#44)])"]
	8 [label="nodeID(8) Project [ss_ext_discount_amt#38, ss_net_paid#44]"]
	9 [label="nodeID(9) Filter ((isnotnull(ss_quantity#34) AND (ss_quantity#34 >= 1)) AND (ss_quantity#34 <= 20))"]
	10 [label="nodeID(10) FileScan parquet tpcds_100_parquet.store_sales[ss_quantity#34,ss_ext_discount_amt#38,ss_net_paid#44]"]
	11 [label="nodeID(11) Subquery subquery#1, [id=#43]"]
	12 [label="nodeID(12) AdaptiveSparkPlan isFinalPlan=false"]
	13 [label="nodeID(13) Project [named_struct(count(1), count(1)#47L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#50, avg(ss_net_paid), avg(ss_net_paid)#52) AS mergedValue#448]"]
	14 [label="nodeID(14) HashAggregate(keys=[], functions=[count(1), avg(ss_ext_discount_amt#38), avg(ss_net_paid#44)])"]
	15 [label="nodeID(15) Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=40]"]
	16 [label="nodeID(16) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(ss_ext_discount_amt#38), partial_avg(ss_net_paid#44)])"]
	17 [label="nodeID(17) Project [ss_ext_discount_amt#38, ss_net_paid#44]"]
	18 [label="nodeID(18) Filter ((isnotnull(ss_quantity#34) AND (ss_quantity#34 >= 1)) AND (ss_quantity#34 <= 20))"]
	19 [label="nodeID(19) FileScan parquet tpcds_100_parquet.store_sales[ss_quantity#34,ss_ext_discount_amt#38,ss_net_paid#44]"]
	20 [label="nodeID(20) Subquery subquery#2, [id=#60]"]
	21 [label="nodeID(21) AdaptiveSparkPlan isFinalPlan=false"]
	22 [label="nodeID(22) Project [named_struct(count(1), count(1)#47L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#50, avg(ss_net_paid), avg(ss_net_paid)#52) AS mergedValue#448]"]
	23 [label="nodeID(23) HashAggregate(keys=[], functions=[count(1), avg(ss_ext_discount_amt#38), avg(ss_net_paid#44)])"]
	24 [label="nodeID(24) Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=57]"]
	25 [label="nodeID(25) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(ss_ext_discount_amt#38), partial_avg(ss_net_paid#44)])"]
	26 [label="nodeID(26) Project [ss_ext_discount_amt#38, ss_net_paid#44]"]
	27 [label="nodeID(27) Filter ((isnotnull(ss_quantity#34) AND (ss_quantity#34 >= 1)) AND (ss_quantity#34 <= 20))"]
	28 [label="nodeID(28) FileScan parquet tpcds_100_parquet.store_sales[ss_quantity#34,ss_ext_discount_amt#38,ss_net_paid#44]"]
	29 [label="nodeID(29) Subquery subquery#4, [id=#77]"]
	30 [label="nodeID(30) AdaptiveSparkPlan isFinalPlan=false"]
	31 [label="nodeID(31) Project [named_struct(count(1), count(1)#54L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#56, avg(ss_net_paid), avg(ss_net_paid)#58) AS mergedValue#449]"]
	32 [label="nodeID(32) HashAggregate(keys=[], functions=[count(1), avg(ss_ext_discount_amt#138), avg(ss_net_paid#144)])"]
	33 [label="nodeID(33) Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=74]"]
	34 [label="nodeID(34) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(ss_ext_discount_amt#138), partial_avg(ss_net_paid#144)])"]
	35 [label="nodeID(35) Project [ss_ext_discount_amt#138, ss_net_paid#144]"]
	36 [label="nodeID(36) Filter ((isnotnull(ss_quantity#134) AND (ss_quantity#134 >= 21)) AND (ss_quantity#134 <= 40))"]
	37 [label="nodeID(37) FileScan parquet tpcds_100_parquet.store_sales[ss_quantity#134,ss_ext_discount_amt#138,ss_net_paid#144]"]
	38 [label="nodeID(38) Subquery subquery#5, [id=#94]"]
	39 [label="nodeID(39) AdaptiveSparkPlan isFinalPlan=false"]
	40 [label="nodeID(40) Project [named_struct(count(1), count(1)#54L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#56, avg(ss_net_paid), avg(ss_net_paid)#58) AS mergedValue#449]"]
	41 [label="nodeID(41) HashAggregate(keys=[], functions=[count(1), avg(ss_ext_discount_amt#138), avg(ss_net_paid#144)])"]
	42 [label="nodeID(42) Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=91]"]
	43 [label="nodeID(43) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(ss_ext_discount_amt#138), partial_avg(ss_net_paid#144)])"]
	44 [label="nodeID(44) Project [ss_ext_discount_amt#138, ss_net_paid#144]"]
	45 [label="nodeID(45) Filter ((isnotnull(ss_quantity#134) AND (ss_quantity#134 >= 21)) AND (ss_quantity#134 <= 40))"]
	46 [label="nodeID(46) FileScan parquet tpcds_100_parquet.store_sales[ss_quantity#134,ss_ext_discount_amt#138,ss_net_paid#144]"]
	47 [label="nodeID(47) Subquery subquery#6, [id=#111]"]
	48 [label="nodeID(48) AdaptiveSparkPlan isFinalPlan=false"]
	49 [label="nodeID(49) Project [named_struct(count(1), count(1)#54L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#56, avg(ss_net_paid), avg(ss_net_paid)#58) AS mergedValue#449]"]
	50 [label="nodeID(50) HashAggregate(keys=[], functions=[count(1), avg(ss_ext_discount_amt#138), avg(ss_net_paid#144)])"]
	51 [label="nodeID(51) Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=108]"]
	52 [label="nodeID(52) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(ss_ext_discount_amt#138), partial_avg(ss_net_paid#144)])"]
	53 [label="nodeID(53) Project [ss_ext_discount_amt#138, ss_net_paid#144]"]
	54 [label="nodeID(54) Filter ((isnotnull(ss_quantity#134) AND (ss_quantity#134 >= 21)) AND (ss_quantity#134 <= 40))"]
	55 [label="nodeID(55) FileScan parquet tpcds_100_parquet.store_sales[ss_quantity#134,ss_ext_discount_amt#138,ss_net_paid#144]"]
	56 [label="nodeID(56) Subquery subquery#8, [id=#128]"]
	57 [label="nodeID(57) AdaptiveSparkPlan isFinalPlan=false"]
	58 [label="nodeID(58) Project [named_struct(count(1), count(1)#60L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#62, avg(ss_net_paid), avg(ss_net_paid)#64) AS mergedValue#450]"]
	59 [label="nodeID(59) HashAggregate(keys=[], functions=[count(1), avg(ss_ext_discount_amt#207), avg(ss_net_paid#213)])"]
	60 [label="nodeID(60) Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=125]"]
	61 [label="nodeID(61) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(ss_ext_discount_amt#207), partial_avg(ss_net_paid#213)])"]
	62 [label="nodeID(62) Project [ss_ext_discount_amt#207, ss_net_paid#213]"]
	63 [label="nodeID(63) Filter ((isnotnull(ss_quantity#203) AND (ss_quantity#203 >= 41)) AND (ss_quantity#203 <= 60))"]
	64 [label="nodeID(64) FileScan parquet tpcds_100_parquet.store_sales[ss_quantity#203,ss_ext_discount_amt#207,ss_net_paid#213]"]
	65 [label="nodeID(65) Subquery subquery#9, [id=#145]"]
	66 [label="nodeID(66) AdaptiveSparkPlan isFinalPlan=false"]
	67 [label="nodeID(67) Project [named_struct(count(1), count(1)#60L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#62, avg(ss_net_paid), avg(ss_net_paid)#64) AS mergedValue#450]"]
	68 [label="nodeID(68) HashAggregate(keys=[], functions=[count(1), avg(ss_ext_discount_amt#207), avg(ss_net_paid#213)])"]
	69 [label="nodeID(69) Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=142]"]
	70 [label="nodeID(70) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(ss_ext_discount_amt#207), partial_avg(ss_net_paid#213)])"]
	71 [label="nodeID(71) Project [ss_ext_discount_amt#207, ss_net_paid#213]"]
	72 [label="nodeID(72) Filter ((isnotnull(ss_quantity#203) AND (ss_quantity#203 >= 41)) AND (ss_quantity#203 <= 60))"]
	73 [label="nodeID(73) FileScan parquet tpcds_100_parquet.store_sales[ss_quantity#203,ss_ext_discount_amt#207,ss_net_paid#213]"]
	74 [label="nodeID(74) Subquery subquery#10, [id=#162]"]
	75 [label="nodeID(75) AdaptiveSparkPlan isFinalPlan=false"]
	76 [label="nodeID(76) Project [named_struct(count(1), count(1)#60L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#62, avg(ss_net_paid), avg(ss_net_paid)#64) AS mergedValue#450]"]
	77 [label="nodeID(77) HashAggregate(keys=[], functions=[count(1), avg(ss_ext_discount_amt#207), avg(ss_net_paid#213)])"]
	78 [label="nodeID(78) Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=159]"]
	79 [label="nodeID(79) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(ss_ext_discount_amt#207), partial_avg(ss_net_paid#213)])"]
	80 [label="nodeID(80) Project [ss_ext_discount_amt#207, ss_net_paid#213]"]
	81 [label="nodeID(81) Filter ((isnotnull(ss_quantity#203) AND (ss_quantity#203 >= 41)) AND (ss_quantity#203 <= 60))"]
	82 [label="nodeID(82) FileScan parquet tpcds_100_parquet.store_sales[ss_quantity#203,ss_ext_discount_amt#207,ss_net_paid#213]"]
	83 [label="nodeID(83) Subquery subquery#12, [id=#179]"]
	84 [label="nodeID(84) AdaptiveSparkPlan isFinalPlan=false"]
	85 [label="nodeID(85) Project [named_struct(count(1), count(1)#66L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#68, avg(ss_net_paid), avg(ss_net_paid)#70) AS mergedValue#451]"]
	86 [label="nodeID(86) HashAggregate(keys=[], functions=[count(1), avg(ss_ext_discount_amt#276), avg(ss_net_paid#282)])"]
	87 [label="nodeID(87) Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=176]"]
	88 [label="nodeID(88) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(ss_ext_discount_amt#276), partial_avg(ss_net_paid#282)])"]
	89 [label="nodeID(89) Project [ss_ext_discount_amt#276, ss_net_paid#282]"]
	90 [label="nodeID(90) Filter ((isnotnull(ss_quantity#272) AND (ss_quantity#272 >= 61)) AND (ss_quantity#272 <= 80))"]
	91 [label="nodeID(91) FileScan parquet tpcds_100_parquet.store_sales[ss_quantity#272,ss_ext_discount_amt#276,ss_net_paid#282]"]
	92 [label="nodeID(92) Subquery subquery#13, [id=#196]"]
	93 [label="nodeID(93) AdaptiveSparkPlan isFinalPlan=false"]
	94 [label="nodeID(94) Project [named_struct(count(1), count(1)#66L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#68, avg(ss_net_paid), avg(ss_net_paid)#70) AS mergedValue#451]"]
	95 [label="nodeID(95) HashAggregate(keys=[], functions=[count(1), avg(ss_ext_discount_amt#276), avg(ss_net_paid#282)])"]
	96 [label="nodeID(96) Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=193]"]
	97 [label="nodeID(97) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(ss_ext_discount_amt#276), partial_avg(ss_net_paid#282)])"]
	98 [label="nodeID(98) Project [ss_ext_discount_amt#276, ss_net_paid#282]"]
	99 [label="nodeID(99) Filter ((isnotnull(ss_quantity#272) AND (ss_quantity#272 >= 61)) AND (ss_quantity#272 <= 80))"]
	100 [label="nodeID(100) FileScan parquet tpcds_100_parquet.store_sales[ss_quantity#272,ss_ext_discount_amt#276,ss_net_paid#282]"]
	101 [label="nodeID(101) Subquery subquery#14, [id=#213]"]
	102 [label="nodeID(102) AdaptiveSparkPlan isFinalPlan=false"]
	103 [label="nodeID(103) Project [named_struct(count(1), count(1)#66L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#68, avg(ss_net_paid), avg(ss_net_paid)#70) AS mergedValue#451]"]
	104 [label="nodeID(104) HashAggregate(keys=[], functions=[count(1), avg(ss_ext_discount_amt#276), avg(ss_net_paid#282)])"]
	105 [label="nodeID(105) Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=210]"]
	106 [label="nodeID(106) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(ss_ext_discount_amt#276), partial_avg(ss_net_paid#282)])"]
	107 [label="nodeID(107) Project [ss_ext_discount_amt#276, ss_net_paid#282]"]
	108 [label="nodeID(108) Filter ((isnotnull(ss_quantity#272) AND (ss_quantity#272 >= 61)) AND (ss_quantity#272 <= 80))"]
	109 [label="nodeID(109) FileScan parquet tpcds_100_parquet.store_sales[ss_quantity#272,ss_ext_discount_amt#276,ss_net_paid#282]"]
	110 [label="nodeID(110) Subquery subquery#16, [id=#230]"]
	111 [label="nodeID(111) AdaptiveSparkPlan isFinalPlan=false"]
	112 [label="nodeID(112) Project [named_struct(count(1), count(1)#72L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#74, avg(ss_net_paid), avg(ss_net_paid)#76) AS mergedValue#452]"]
	113 [label="nodeID(113) HashAggregate(keys=[], functions=[count(1), avg(ss_ext_discount_amt#345), avg(ss_net_paid#351)])"]
	114 [label="nodeID(114) Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=227]"]
	115 [label="nodeID(115) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(ss_ext_discount_amt#345), partial_avg(ss_net_paid#351)])"]
	116 [label="nodeID(116) Project [ss_ext_discount_amt#345, ss_net_paid#351]"]
	117 [label="nodeID(117) Filter ((isnotnull(ss_quantity#341) AND (ss_quantity#341 >= 81)) AND (ss_quantity#341 <= 100))"]
	118 [label="nodeID(118) FileScan parquet tpcds_100_parquet.store_sales[ss_quantity#341,ss_ext_discount_amt#345,ss_net_paid#351]"]
	119 [label="nodeID(119) Subquery subquery#17, [id=#247]"]
	120 [label="nodeID(120) AdaptiveSparkPlan isFinalPlan=false"]
	121 [label="nodeID(121) Project [named_struct(count(1), count(1)#72L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#74, avg(ss_net_paid), avg(ss_net_paid)#76) AS mergedValue#452]"]
	122 [label="nodeID(122) HashAggregate(keys=[], functions=[count(1), avg(ss_ext_discount_amt#345), avg(ss_net_paid#351)])"]
	123 [label="nodeID(123) Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=244]"]
	124 [label="nodeID(124) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(ss_ext_discount_amt#345), partial_avg(ss_net_paid#351)])"]
	125 [label="nodeID(125) Project [ss_ext_discount_amt#345, ss_net_paid#351]"]
	126 [label="nodeID(126) Filter ((isnotnull(ss_quantity#341) AND (ss_quantity#341 >= 81)) AND (ss_quantity#341 <= 100))"]
	127 [label="nodeID(127) FileScan parquet tpcds_100_parquet.store_sales[ss_quantity#341,ss_ext_discount_amt#345,ss_net_paid#351]"]
	128 [label="nodeID(128) Subquery subquery#18, [id=#264]"]
	129 [label="nodeID(129) AdaptiveSparkPlan isFinalPlan=false"]
	130 [label="nodeID(130) Project [named_struct(count(1), count(1)#72L, avg(ss_ext_discount_amt), avg(ss_ext_discount_amt)#74, avg(ss_net_paid), avg(ss_net_paid)#76) AS mergedValue#452]"]
	131 [label="nodeID(131) HashAggregate(keys=[], functions=[count(1), avg(ss_ext_discount_amt#345), avg(ss_net_paid#351)])"]
	132 [label="nodeID(132) Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=261]"]
	133 [label="nodeID(133) HashAggregate(keys=[], functions=[partial_count(1), partial_avg(ss_ext_discount_amt#345), partial_avg(ss_net_paid#351)])"]
	134 [label="nodeID(134) Project [ss_ext_discount_amt#345, ss_net_paid#351]"]
	135 [label="nodeID(135) Filter ((isnotnull(ss_quantity#341) AND (ss_quantity#341 >= 81)) AND (ss_quantity#341 <= 100))"]
	136 [label="nodeID(136) FileScan parquet tpcds_100_parquet.store_sales[ss_quantity#341,ss_ext_discount_amt#345,ss_net_paid#351]"]
	137 [label="nodeID(137) Filter (isnotnull(r_reason_sk#20) AND (r_reason_sk#20 = 1))"]
	138 [label="nodeID(138) FileScan parquet tpcds_100_parquet.reason[r_reason_sk#20]"]
	1 -> 0
	2 -> 1
	3 -> 2
	4 -> 3
	5 -> 4
	6 -> 5
	7 -> 6
	8 -> 7
	9 -> 8
	10 -> 9
	11 -> 1
	12 -> 11
	13 -> 12
	14 -> 13
	15 -> 14
	16 -> 15
	17 -> 16
	18 -> 17
	19 -> 18
	20 -> 1
	21 -> 20
	22 -> 21
	23 -> 22
	24 -> 23
	25 -> 24
	26 -> 25
	27 -> 26
	28 -> 27
	29 -> 1
	30 -> 29
	31 -> 30
	32 -> 31
	33 -> 32
	34 -> 33
	35 -> 34
	36 -> 35
	37 -> 36
	38 -> 1
	39 -> 38
	40 -> 39
	41 -> 40
	42 -> 41
	43 -> 42
	44 -> 43
	45 -> 44
	46 -> 45
	47 -> 1
	48 -> 47
	49 -> 48
	50 -> 49
	51 -> 50
	52 -> 51
	53 -> 52
	54 -> 53
	55 -> 54
	56 -> 1
	57 -> 56
	58 -> 57
	59 -> 58
	60 -> 59
	61 -> 60
	62 -> 61
	63 -> 62
	64 -> 63
	65 -> 1
	66 -> 65
	67 -> 66
	68 -> 67
	69 -> 68
	70 -> 69
	71 -> 70
	72 -> 71
	73 -> 72
	74 -> 1
	75 -> 74
	76 -> 75
	77 -> 76
	78 -> 77
	79 -> 78
	80 -> 79
	81 -> 80
	82 -> 81
	83 -> 1
	84 -> 83
	85 -> 84
	86 -> 85
	87 -> 86
	88 -> 87
	89 -> 88
	90 -> 89
	91 -> 90
	92 -> 1
	93 -> 92
	94 -> 93
	95 -> 94
	96 -> 95
	97 -> 96
	98 -> 97
	99 -> 98
	100 -> 99
	101 -> 1
	102 -> 101
	103 -> 102
	104 -> 103
	105 -> 104
	106 -> 105
	107 -> 106
	108 -> 107
	109 -> 108
	110 -> 1
	111 -> 110
	112 -> 111
	113 -> 112
	114 -> 113
	115 -> 114
	116 -> 115
	117 -> 116
	118 -> 117
	119 -> 1
	120 -> 119
	121 -> 120
	122 -> 121
	123 -> 122
	124 -> 123
	125 -> 124
	126 -> 125
	127 -> 126
	128 -> 1
	129 -> 128
	130 -> 129
	131 -> 130
	132 -> 131
	133 -> 132
	134 -> 133
	135 -> 134
	136 -> 135
	137 -> 1
	138 -> 137
}
