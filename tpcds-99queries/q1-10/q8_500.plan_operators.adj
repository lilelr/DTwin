// The Round Table
digraph {
	0 [label="nodeID(0) "]
	1 [label="nodeID(1) HashAggregate(keys=[s_store_name#61], functions=[sum(ss_net_profit#27)])"]
	2 [label="nodeID(2) Exchange hashpartitioning(s_store_name#61, 200), ENSURE_REQUIREMENTS, [plan_id=174]"]
	3 [label="nodeID(3) HashAggregate(keys=[s_store_name#61], functions=[partial_sum(ss_net_profit#27)])"]
	4 [label="nodeID(4) Project [ss_net_profit#27, s_store_name#61]"]
	5 [label="nodeID(5) BroadcastHashJoin [substr(s_zip#81, 1, 2)], [substr(ca_zip#0, 1, 2)], Inner, BuildRight, false"]
	6 [label="nodeID(6) Project [ss_net_profit#27, s_store_name#61, s_zip#81]"]
	7 [label="nodeID(7) BroadcastHashJoin [ss_store_sk#12], [s_store_sk#56], Inner, BuildRight, false"]
	8 [label="nodeID(8) Project [ss_store_sk#12, ss_net_profit#27]"]
	9 [label="nodeID(9) BroadcastHashJoin [ss_sold_date_sk#5], [d_date_sk#28], Inner, BuildRight, false"]
	10 [label="nodeID(10) Filter (isnotnull(ss_sold_date_sk#5) AND isnotnull(ss_store_sk#12))"]
	11 [label="nodeID(11) FileScan parquet tpcds_500_parquet.store_sales[ss_sold_date_sk#5,ss_store_sk#12,ss_net_profit#27"]
	12 [label="nodeID(12) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=140]"]
	13 [label="nodeID(13) Project [d_date_sk#28]"]
	14 [label="nodeID(14) Filter ((((isnotnull(d_qoy#38) AND isnotnull(d_year#34)) AND (d_qoy#38 = 2)) AND (d_year#34 = 1998)) AND isnotnull(d_date_sk#28))"]
	15 [label="nodeID(15) FileScan parquet tpcds_500_parquet.date_dim[d_date_sk#28,d_year#34,d_qoy#38"]
	16 [label="nodeID(16) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=144]"]
	17 [label="nodeID(17) Filter (isnotnull(s_store_sk#56) AND isnotnull(s_zip#81))"]
	18 [label="nodeID(18) FileScan parquet tpcds_500_parquet.store[s_store_sk#56,s_store_name#61,s_zip#81"]
	19 [label="nodeID(19) BroadcastExchange HashedRelationBroadcastMode(List(substr(input[0, string, true], 1, 2)),false), [plan_id=169]"]
	20 [label="nodeID(20) HashAggregate(keys=[ca_zip#0], functions=[])"]
	21 [label="nodeID(21) Exchange hashpartitioning(ca_zip#0, 200), ENSURE_REQUIREMENTS, [plan_id=166]"]
	22 [label="nodeID(22) HashAggregate(keys=[ca_zip#0], functions=[])"]
	23 [label="nodeID(23) Project [substr(ca_zip#94, 1, 5) AS ca_zip#0]"]
	24 [label="nodeID(24) SortMergeJoin [coalesce(substr(ca_zip#94, 1, 5), ), isnull(substr(ca_zip#94, 1, 5))], [coalesce(ca_zip#1, ), isnull(ca_zip#1)], LeftSemi"]
	25 [label="nodeID(25) Sort [coalesce(substr(ca_zip#94, 1, 5), ) ASC NULLS FIRST, isnull(substr(ca_zip#94, 1, 5)) ASC NULLS FIRST], false, 0"]
	26 [label="nodeID(26) Exchange hashpartitioning(coalesce(substr(ca_zip#94, 1, 5), ), isnull(substr(ca_zip#94, 1, 5)), 200), ENSURE_REQUIREMENTS, [plan_id=158]"]
	27 [label="nodeID(27) Filter (substr(ca_zip#94, 1, 5) INSET 10144, 10336, 10390, 10445, 10516, 10567, 11101, 11356, 11376, 11489, 11634, 11928, 12305, 13354, 13375, 13376, 13394, 13595, 13695, 13955, 14060, 14089, 14171, 14328, 14663, 14867, 14922, 15126, 15146, 15371, 15455, 15559, 15723, 15734, 15765, 15798, 15882, 16021, 16725, 16807, 17043, 17183, 17871, 17879, 17920, 18119, 18270, 18376, 18383, 18426, 18652, 18767, 18799, 18840, 18842, 18845, 18906, 19430, 19505, 19512, 19515, 19736, 19769, 19849, 20004, 20260, 20548, 21076, 21195, 21286, 21309, 21337, 21756, 22152, 22245, 22246, 22351, 22437, 22461, 22685, 22744, 22752, 22927, 23006, 23470, 23932, 23968, 24128, 24206, 24317, 24610, 24671, 24676, 24996, 25003, 25103, 25280, 25486, 25631, 25733, 25782, 25858, 25989, 26065, 26105, 26231, 26233, 26653, 26689, 26859, 27068, 27156, 27385, 27700, 28286, 28488, 28545, 28577, 28587, 28709, 28810, 28898, 28915, 29178, 29741, 29839, 30010, 30122, 30431, 30450, 30469, 30625, 30903, 31016, 31029, 31387, 31671, 31880, 32213, 32754, 33123, 33282, 33515, 33786, 34102, 34322, 34425, 35258, 35458, 35474, 35576, 35850, 35942, 36233, 36420, 36446, 36495, 36634, 37125, 37126, 37930, 38122, 38193, 38415, 38607, 38935, 39127, 39192, 39371, 39516, 39736, 39861, 39972, 40081, 40162, 40558, 40604, 41248, 41367, 41368, 41766, 41918, 42029, 42666, 42961, 43285, 43848, 43933, 44165, 44438, 45200, 45266, 45375, 45549, 45692, 45721, 45748, 46081, 46136, 46820, 47305, 47537, 47770, 48033, 48425, 48583, 49130, 49156, 49448, 50016, 50298, 50308, 50412, 51061, 51103, 51200, 51211, 51622, 51649, 51650, 51798, 51949, 52867, 53179, 53268, 53535, 53672, 54364, 54601, 54917, 55253, 55307, 55565, 56240, 56458, 56529, 56571, 56575, 56616, 56691, 56910, 57047, 57647, 57665, 57834, 57855, 58048, 58058, 58078, 58263, 58470, 58943, 59166, 59402, 60099, 60279, 60576, 61265, 61547, 61810, 61860, 62377, 62496, 62878, 62971, 63089, 63193, 63435, 63792, 63837, 63981, 64034, 64147, 64457, 64528, 64544, 65084, 65164, 66162, 66708, 66864, 67030, 67301, 67467, 67473, 67853, 67875, 67897, 68014, 68100, 68101, 68309, 68341, 68621, 68786, 68806, 68880, 68893, 68908, 69035, 69399, 69913, 69952, 70372, 70466, 70738, 71256, 71286, 71791, 71954, 72013, 72151, 72175, 72305, 72325, 72425, 72550, 72823, 73134, 73171, 73241, 73273, 73520, 73650, 74351, 75691, 76107, 76231, 76232, 76614, 76638, 76698, 77191, 77556, 77610, 77721, 78451, 78567, 78668, 78890, 79077, 79777, 79994, 81019, 81096, 81312, 81426, 82136, 82276, 82636, 83041, 83144, 83444, 83849, 83921, 83926, 83933, 84093, 84935, 85816, 86057, 86198, 86284, 86379, 87343, 87501, 87816, 88086, 88190, 88424, 88885, 89091, 89360, 90225, 90257, 90578, 91068, 91110, 91137, 91393, 92712, 94167, 94627, 94898, 94945, 94983, 96451, 96576, 96765, 96888, 96976, 97189, 97789, 98025, 98235, 98294, 98359, 98569, 99076, 99543 AND isnotnull(substr(ca_zip#94, 1, 5)))"]
	28 [label="nodeID(28) FileScan parquet tpcds_500_parquet.customer_address[ca_zip#94"]
	29 [label="nodeID(29) Sort [coalesce(ca_zip#1, ) ASC NULLS FIRST, isnull(ca_zip#1) ASC NULLS FIRST], false, 0"]
	30 [label="nodeID(30) Exchange hashpartitioning(coalesce(ca_zip#1, ), isnull(ca_zip#1), 200), ENSURE_REQUIREMENTS, [plan_id=159]"]
	31 [label="nodeID(31) Project [ca_zip#1]"]
	32 [label="nodeID(32) Filter (cnt#2L > 10)"]
	33 [label="nodeID(33) HashAggregate(keys=[ca_zip#125], functions=[count(1)])"]
	34 [label="nodeID(34) Exchange hashpartitioning(ca_zip#125, 200), ENSURE_REQUIREMENTS, [plan_id=152]"]
	35 [label="nodeID(35) HashAggregate(keys=[ca_zip#125], functions=[partial_count(1)])"]
	36 [label="nodeID(36) Project [ca_zip#125]"]
	37 [label="nodeID(37) BroadcastHashJoin [ca_address_sk#116], [c_current_addr_sk#102], Inner, BuildLeft, false"]
	38 [label="nodeID(38) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=147]"]
	39 [label="nodeID(39) Filter isnotnull(ca_address_sk#116)"]
	40 [label="nodeID(40) FileScan parquet tpcds_500_parquet.customer_address[ca_address_sk#116,ca_zip#125"]
	41 [label="nodeID(41) Project [c_current_addr_sk#102]"]
	42 [label="nodeID(42) Filter ((isnotnull(c_preferred_cust_flag#108) AND (c_preferred_cust_flag#108 = Y)) AND isnotnull(c_current_addr_sk#102))"]
	43 [label="nodeID(43) FileScan parquet tpcds_500_parquet.customer[c_current_addr_sk#102,c_preferred_cust_flag#108"]
	1 -> 0
	2 -> 1
	3 -> 2
	4 -> 3
	5 -> 4
	6 -> 5
	7 -> 6
	8 -> 7
	9 -> 8
	10 -> 9
	11 -> 10
	12 -> 9
	13 -> 12
	14 -> 13
	15 -> 14
	16 -> 7
	17 -> 16
	18 -> 17
	19 -> 5
	20 -> 19
	21 -> 20
	22 -> 21
	23 -> 22
	24 -> 23
	25 -> 24
	26 -> 25
	27 -> 26
	28 -> 27
	29 -> 24
	30 -> 29
	31 -> 30
	32 -> 31
	33 -> 32
	34 -> 33
	35 -> 34
	36 -> 35
	37 -> 36
	38 -> 37
	39 -> 38
	40 -> 39
	41 -> 37
	42 -> 41
	43 -> 42
}
