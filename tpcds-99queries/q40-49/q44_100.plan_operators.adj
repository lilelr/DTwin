// The Round Table
digraph {
	0 [label="nodeID(0) "]
	1 [label="nodeID(1) TakeOrderedAndProject(limit=100, orderBy=[rnk#4 ASC NULLS FIRST], output=[rnk#4,best_performing#10,worst_performing#11])"]
	2 [label="nodeID(2) Project [rnk#4, i_product_name#60 AS best_performing#10, i_product_name#105 AS worst_performing#11]"]
	3 [label="nodeID(3) BroadcastHashJoin [item_sk#5], [i_item_sk#84], Inner, BuildRight, false"]
	4 [label="nodeID(4) Project [rnk#4, item_sk#5, i_product_name#60]"]
	5 [label="nodeID(5) BroadcastHashJoin [item_sk#0], [i_item_sk#39], Inner, BuildRight, false"]
	6 [label="nodeID(6) Project [item_sk#0, rnk#4, item_sk#5]"]
	7 [label="nodeID(7) SortMergeJoin [rnk#4], [rnk#9], Inner"]
	8 [label="nodeID(8) Sort [rnk#4 ASC NULLS FIRST], false, 0"]
	9 [label="nodeID(9) Project [item_sk#0, rnk#4]"]
	10 [label="nodeID(10) Filter ((rnk#4 < 11) AND isnotnull(item_sk#0))"]
	11 [label="nodeID(11) Window [rank(rank_col#1) windowspecdefinition(rank_col#1 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#4], [rank_col#1 ASC NULLS FIRST]"]
	12 [label="nodeID(12) Sort [rank_col#1 ASC NULLS FIRST], false, 0"]
	13 [label="nodeID(13) Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=158]"]
	14 [label="nodeID(14) Filter (isnotnull(rank_col#1) AND (rank_col#1 > (0.9 * Subquery subquery#3, [id=#119])))"]
	15 [label="nodeID(15) Subquery subquery#3, [id=#119]"]
	16 [label="nodeID(16) AdaptiveSparkPlan isFinalPlan=false"]
	17 [label="nodeID(17) HashAggregate(keys=[ss_store_sk#121], functions=[avg(ss_net_profit#136)])"]
	18 [label="nodeID(18) Exchange hashpartitioning(ss_store_sk#121, 200), ENSURE_REQUIREMENTS, [plan_id=117]"]
	19 [label="nodeID(19) HashAggregate(keys=[ss_store_sk#121], functions=[partial_avg(ss_net_profit#136)])"]
	20 [label="nodeID(20) Project [ss_store_sk#121, ss_net_profit#136]"]
	21 [label="nodeID(21) Filter ((isnotnull(ss_store_sk#121) AND (ss_store_sk#121 = 4)) AND isnull(ss_addr_sk#120))"]
	22 [label="nodeID(22) FileScan parquet tpcds_100_parquet.store_sales[ss_addr_sk#120,ss_store_sk#121,ss_net_profit#136]"]
	23 [label="nodeID(23) HashAggregate(keys=[ss_item_sk#18], functions=[avg(ss_net_profit#38)])"]
	24 [label="nodeID(24) Exchange hashpartitioning(ss_item_sk#18, 200), ENSURE_REQUIREMENTS, [plan_id=154]"]
	25 [label="nodeID(25) HashAggregate(keys=[ss_item_sk#18], functions=[partial_avg(ss_net_profit#38)])"]
	26 [label="nodeID(26) Project [ss_item_sk#18, ss_net_profit#38]"]
	27 [label="nodeID(27) Filter (isnotnull(ss_store_sk#23) AND (ss_store_sk#23 = 4))"]
	28 [label="nodeID(28) FileScan parquet tpcds_100_parquet.store_sales[ss_item_sk#18,ss_store_sk#23,ss_net_profit#38]"]
	29 [label="nodeID(29) Sort [rnk#9 ASC NULLS FIRST], false, 0"]
	30 [label="nodeID(30) Project [item_sk#5, rnk#9]"]
	31 [label="nodeID(31) Filter ((rnk#9 < 11) AND isnotnull(item_sk#5))"]
	32 [label="nodeID(32) Window [rank(rank_col#6) windowspecdefinition(rank_col#6 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#9], [rank_col#6 DESC NULLS LAST]"]
	33 [label="nodeID(33) Sort [rank_col#6 DESC NULLS LAST], false, 0"]
	34 [label="nodeID(34) Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=167]"]
	35 [label="nodeID(35) Filter (isnotnull(rank_col#6) AND (rank_col#6 > (0.9 * Subquery subquery#8, [id=#132])))"]
	36 [label="nodeID(36) Subquery subquery#8, [id=#132]"]
	37 [label="nodeID(37) AdaptiveSparkPlan isFinalPlan=false"]
	38 [label="nodeID(38) HashAggregate(keys=[ss_store_sk#121], functions=[avg(ss_net_profit#136)])"]
	39 [label="nodeID(39) Exchange hashpartitioning(ss_store_sk#121, 200), ENSURE_REQUIREMENTS, [plan_id=130]"]
	40 [label="nodeID(40) HashAggregate(keys=[ss_store_sk#121], functions=[partial_avg(ss_net_profit#136)])"]
	41 [label="nodeID(41) Project [ss_store_sk#121, ss_net_profit#136]"]
	42 [label="nodeID(42) Filter ((isnotnull(ss_store_sk#121) AND (ss_store_sk#121 = 4)) AND isnull(ss_addr_sk#120))"]
	43 [label="nodeID(43) FileScan parquet tpcds_100_parquet.store_sales[ss_addr_sk#120,ss_store_sk#121,ss_net_profit#136]"]
	44 [label="nodeID(44) HashAggregate(keys=[ss_item_sk#63], functions=[avg(ss_net_profit#83)])"]
	45 [label="nodeID(45) Exchange hashpartitioning(ss_item_sk#63, 200), ENSURE_REQUIREMENTS, [plan_id=163]"]
	46 [label="nodeID(46) HashAggregate(keys=[ss_item_sk#63], functions=[partial_avg(ss_net_profit#83)])"]
	47 [label="nodeID(47) Project [ss_item_sk#63, ss_net_profit#83]"]
	48 [label="nodeID(48) Filter (isnotnull(ss_store_sk#68) AND (ss_store_sk#68 = 4))"]
	49 [label="nodeID(49) FileScan parquet tpcds_100_parquet.store_sales[ss_item_sk#63,ss_store_sk#68,ss_net_profit#83]"]
	50 [label="nodeID(50) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=179]"]
	51 [label="nodeID(51) Filter isnotnull(i_item_sk#39)"]
	52 [label="nodeID(52) FileScan parquet tpcds_100_parquet.item[i_item_sk#39,i_product_name#60]"]
	53 [label="nodeID(53) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=183]"]
	54 [label="nodeID(54) Filter isnotnull(i_item_sk#84)"]
	55 [label="nodeID(55) FileScan parquet tpcds_100_parquet.item[i_item_sk#84,i_product_name#105]"]
	1 -> 0
	2 -> 1
	3 -> 2
	4 -> 3
	5 -> 4
	6 -> 5
	7 -> 6
	8 -> 7
	9 -> 8
	10 -> 9
	11 -> 10
	12 -> 11
	13 -> 12
	14 -> 13
	15 -> 14
	16 -> 15
	17 -> 16
	18 -> 17
	19 -> 18
	20 -> 19
	21 -> 20
	22 -> 21
	23 -> 14
	24 -> 23
	25 -> 24
	26 -> 25
	27 -> 26
	28 -> 27
	29 -> 7
	30 -> 29
	31 -> 30
	32 -> 31
	33 -> 32
	34 -> 33
	35 -> 34
	36 -> 35
	37 -> 36
	38 -> 37
	39 -> 38
	40 -> 39
	41 -> 40
	42 -> 41
	43 -> 42
	44 -> 35
	45 -> 44
	46 -> 45
	47 -> 46
	48 -> 47
	49 -> 48
	50 -> 5
	51 -> 50
	52 -> 51
	53 -> 3
	54 -> 53
	55 -> 54
}
