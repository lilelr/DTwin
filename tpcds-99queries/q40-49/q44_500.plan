== Physical Plan ==
AdaptiveSparkPlan isFinalPlan=false
+- TakeOrderedAndProject(limit=100, orderBy=[rnk#4 ASC NULLS FIRST], output=[rnk#4,best_performing#10,worst_performing#11])
   +- Project [rnk#4, i_product_name#60 AS best_performing#10, i_product_name#105 AS worst_performing#11]
      +- BroadcastHashJoin [item_sk#5], [i_item_sk#84], Inner, BuildRight, false
         :- Project [rnk#4, item_sk#5, i_product_name#60]
         :  +- BroadcastHashJoin [item_sk#0], [i_item_sk#39], Inner, BuildRight, false
         :     :- Project [item_sk#0, rnk#4, item_sk#5]
         :     :  +- SortMergeJoin [rnk#4], [rnk#9], Inner
         :     :     :- Sort [rnk#4 ASC NULLS FIRST], false, 0
         :     :     :  +- Project [item_sk#0, rnk#4]
         :     :     :     +- Filter ((rnk#4 < 11) AND isnotnull(item_sk#0))
         :     :     :        +- Window [rank(rank_col#1) windowspecdefinition(rank_col#1 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#4], [rank_col#1 ASC NULLS FIRST]
         :     :     :           +- Sort [rank_col#1 ASC NULLS FIRST], false, 0
         :     :     :              +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=158]
         :     :     :                 +- Filter (isnotnull(rank_col#1) AND (rank_col#1 > (0.9 * Subquery subquery#3, [id=#119])))
         :     :     :                    :  +- Subquery subquery#3, [id=#119]
         :     :     :                    :     +- AdaptiveSparkPlan isFinalPlan=false
         :     :     :                    :        +- HashAggregate(keys=[ss_store_sk#121], functions=[avg(ss_net_profit#136)])
         :     :     :                    :           +- Exchange hashpartitioning(ss_store_sk#121, 200), ENSURE_REQUIREMENTS, [plan_id=117]
         :     :     :                    :              +- HashAggregate(keys=[ss_store_sk#121], functions=[partial_avg(ss_net_profit#136)])
         :     :     :                    :                 +- Project [ss_store_sk#121, ss_net_profit#136]
         :     :     :                    :                    +- Filter ((isnotnull(ss_store_sk#121) AND (ss_store_sk#121 = 4)) AND isnull(ss_addr_sk#120))
         :     :     :                    :                       +- FileScan parquet tpcds_500_parquet.store_sales[ss_addr_sk#120,ss_store_sk#121,ss_net_profit#136] Batched: true, DataFilters: [isnotnull(ss_store_sk#121), (ss_store_sk#121 = 4), isnull(ss_addr_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_500/tpcds_parquet/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,4), IsNull(ss_addr_sk)], ReadSchema: struct<ss_addr_sk:int,ss_store_sk:int,ss_net_profit:double>
         :     :     :                    +- HashAggregate(keys=[ss_item_sk#18], functions=[avg(ss_net_profit#38)])
         :     :     :                       +- Exchange hashpartitioning(ss_item_sk#18, 200), ENSURE_REQUIREMENTS, [plan_id=154]
         :     :     :                          +- HashAggregate(keys=[ss_item_sk#18], functions=[partial_avg(ss_net_profit#38)])
         :     :     :                             +- Project [ss_item_sk#18, ss_net_profit#38]
         :     :     :                                +- Filter (isnotnull(ss_store_sk#23) AND (ss_store_sk#23 = 4))
         :     :     :                                   +- FileScan parquet tpcds_500_parquet.store_sales[ss_item_sk#18,ss_store_sk#23,ss_net_profit#38] Batched: true, DataFilters: [isnotnull(ss_store_sk#23), (ss_store_sk#23 = 4)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_500/tpcds_parquet/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,4)], ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_net_profit:double>
         :     :     +- Sort [rnk#9 ASC NULLS FIRST], false, 0
         :     :        +- Project [item_sk#5, rnk#9]
         :     :           +- Filter ((rnk#9 < 11) AND isnotnull(item_sk#5))
         :     :              +- Window [rank(rank_col#6) windowspecdefinition(rank_col#6 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#9], [rank_col#6 DESC NULLS LAST]
         :     :                 +- Sort [rank_col#6 DESC NULLS LAST], false, 0
         :     :                    +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=167]
         :     :                       +- Filter (isnotnull(rank_col#6) AND (rank_col#6 > (0.9 * Subquery subquery#8, [id=#132])))
         :     :                          :  +- Subquery subquery#8, [id=#132]
         :     :                          :     +- AdaptiveSparkPlan isFinalPlan=false
         :     :                          :        +- HashAggregate(keys=[ss_store_sk#121], functions=[avg(ss_net_profit#136)])
         :     :                          :           +- Exchange hashpartitioning(ss_store_sk#121, 200), ENSURE_REQUIREMENTS, [plan_id=130]
         :     :                          :              +- HashAggregate(keys=[ss_store_sk#121], functions=[partial_avg(ss_net_profit#136)])
         :     :                          :                 +- Project [ss_store_sk#121, ss_net_profit#136]
         :     :                          :                    +- Filter ((isnotnull(ss_store_sk#121) AND (ss_store_sk#121 = 4)) AND isnull(ss_addr_sk#120))
         :     :                          :                       +- FileScan parquet tpcds_500_parquet.store_sales[ss_addr_sk#120,ss_store_sk#121,ss_net_profit#136] Batched: true, DataFilters: [isnotnull(ss_store_sk#121), (ss_store_sk#121 = 4), isnull(ss_addr_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_500/tpcds_parquet/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,4), IsNull(ss_addr_sk)], ReadSchema: struct<ss_addr_sk:int,ss_store_sk:int,ss_net_profit:double>
         :     :                          +- HashAggregate(keys=[ss_item_sk#63], functions=[avg(ss_net_profit#83)])
         :     :                             +- Exchange hashpartitioning(ss_item_sk#63, 200), ENSURE_REQUIREMENTS, [plan_id=163]
         :     :                                +- HashAggregate(keys=[ss_item_sk#63], functions=[partial_avg(ss_net_profit#83)])
         :     :                                   +- Project [ss_item_sk#63, ss_net_profit#83]
         :     :                                      +- Filter (isnotnull(ss_store_sk#68) AND (ss_store_sk#68 = 4))
         :     :                                         +- FileScan parquet tpcds_500_parquet.store_sales[ss_item_sk#63,ss_store_sk#68,ss_net_profit#83] Batched: true, DataFilters: [isnotnull(ss_store_sk#68), (ss_store_sk#68 = 4)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_500/tpcds_parquet/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,4)], ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_net_profit:double>
         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=179]
         :        +- Filter isnotnull(i_item_sk#39)
         :           +- FileScan parquet tpcds_500_parquet.item[i_item_sk#39,i_product_name#60] Batched: true, DataFilters: [isnotnull(i_item_sk#39)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_500/tpcds_parquet/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_product_name:string>
         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=183]
            +- Filter isnotnull(i_item_sk#84)
               +- FileScan parquet tpcds_500_parquet.item[i_item_sk#84,i_product_name#105] Batched: true, DataFilters: [isnotnull(i_item_sk#84)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://p09:8999/BenchmarkData/Tpcds/tpcds_500/tpcds_parquet/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_product_name:string>


