// The Round Table
digraph {
	0 [label="nodeID(0) "]
	1 [label="nodeID(1) HashAggregate(keys=[w_state#73, i_item_id#78], functions=[sum(CASE WHEN (cast(d_date#101 as date) < 2000-03-11) THEN (cs_sales_price#23 - coalesce(cr_refunded_cash#59, 0.0)) ELSE 0.0 END), sum(CASE WHEN (cast(d_date#101 as date) >= 2000-03-11) THEN (cs_sales_price#23 - coalesce(cr_refunded_cash#59, 0.0)) ELSE 0.0 END)])"]
	2 [label="nodeID(2) Exchange hashpartitioning(w_state#73, i_item_id#78, 200), ENSURE_REQUIREMENTS, [plan_id=117]"]
	3 [label="nodeID(3) HashAggregate(keys=[w_state#73, i_item_id#78], functions=[partial_sum(CASE WHEN (cast(d_date#101 as date) < 2000-03-11) THEN (cs_sales_price#23 - coalesce(cr_refunded_cash#59, 0.0)) ELSE 0.0 END), partial_sum(CASE WHEN (cast(d_date#101 as date) >= 2000-03-11) THEN (cs_sales_price#23 - coalesce(cr_refunded_cash#59, 0.0)) ELSE 0.0 END)])"]
	4 [label="nodeID(4) Project [cs_sales_price#23, cr_refunded_cash#59, w_state#73, i_item_id#78, d_date#101]"]
	5 [label="nodeID(5) BroadcastHashJoin [cs_sold_date_sk#2], [d_date_sk#99], Inner, BuildRight, false"]
	6 [label="nodeID(6) Project [cs_sold_date_sk#2, cs_sales_price#23, cr_refunded_cash#59, w_state#73, i_item_id#78]"]
	7 [label="nodeID(7) BroadcastHashJoin [cs_item_sk#17], [i_item_sk#77], Inner, BuildRight, false"]
	8 [label="nodeID(8) Project [cs_sold_date_sk#2, cs_item_sk#17, cs_sales_price#23, cr_refunded_cash#59, w_state#73]"]
	9 [label="nodeID(9) BroadcastHashJoin [cs_warehouse_sk#16], [w_warehouse_sk#63], Inner, BuildRight, false"]
	10 [label="nodeID(10) Project [cs_sold_date_sk#2, cs_warehouse_sk#16, cs_item_sk#17, cs_sales_price#23, cr_refunded_cash#59]"]
	11 [label="nodeID(11) SortMergeJoin [cs_order_number#19L, cs_item_sk#17], [cr_order_number#52L, cr_item_sk#38], LeftOuter"]
	12 [label="nodeID(12) Sort [cs_order_number#19L ASC NULLS FIRST, cs_item_sk#17 ASC NULLS FIRST], false, 0"]
	13 [label="nodeID(13) Exchange hashpartitioning(cs_order_number#19L, cs_item_sk#17, 200), ENSURE_REQUIREMENTS, [plan_id=97]"]
	14 [label="nodeID(14) Filter ((isnotnull(cs_warehouse_sk#16) AND isnotnull(cs_item_sk#17)) AND isnotnull(cs_sold_date_sk#2))"]
	15 [label="nodeID(15) FileScan parquet tpcds_500_parquet.catalog_sales[cs_sold_date_sk#2,cs_warehouse_sk#16,cs_item_sk#17,cs_order_number#19L,cs_sales_price#23"]
	16 [label="nodeID(16) Sort [cr_order_number#52L ASC NULLS FIRST, cr_item_sk#38 ASC NULLS FIRST], false, 0"]
	17 [label="nodeID(17) Exchange hashpartitioning(cr_order_number#52L, cr_item_sk#38, 200), ENSURE_REQUIREMENTS, [plan_id=98]"]
	18 [label="nodeID(18) Filter (isnotnull(cr_order_number#52L) AND isnotnull(cr_item_sk#38))"]
	19 [label="nodeID(19) FileScan parquet tpcds_500_parquet.catalog_returns[cr_item_sk#38,cr_order_number#52L,cr_refunded_cash#59"]
	20 [label="nodeID(20) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=104]"]
	21 [label="nodeID(21) Filter isnotnull(w_warehouse_sk#63)"]
	22 [label="nodeID(22) FileScan parquet tpcds_500_parquet.warehouse[w_warehouse_sk#63,w_state#73"]
	23 [label="nodeID(23) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=108]"]
	24 [label="nodeID(24) Project [i_item_sk#77, i_item_id#78]"]
	25 [label="nodeID(25) Filter (((isnotnull(i_current_price#82) AND (i_current_price#82 >= 0.99)) AND (i_current_price#82 <= 1.49)) AND isnotnull(i_item_sk#77))"]
	26 [label="nodeID(26) FileScan parquet tpcds_500_parquet.item[i_item_sk#77,i_item_id#78,i_current_price#82"]
	27 [label="nodeID(27) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=112]"]
	28 [label="nodeID(28) Filter (((isnotnull(d_date#101) AND (cast(d_date#101 as date) >= 2000-02-10)) AND (cast(d_date#101 as date) <= 2000-04-10)) AND isnotnull(d_date_sk#99))"]
	29 [label="nodeID(29) FileScan parquet tpcds_500_parquet.date_dim[d_date_sk#99,d_date#101"]
	1 -> 0
	2 -> 1
	3 -> 2
	4 -> 3
	5 -> 4
	6 -> 5
	7 -> 6
	8 -> 7
	9 -> 8
	10 -> 9
	11 -> 10
	12 -> 11
	13 -> 12
	14 -> 13
	15 -> 14
	16 -> 11
	17 -> 16
	18 -> 17
	19 -> 18
	20 -> 9
	21 -> 20
	22 -> 21
	23 -> 7
	24 -> 23
	25 -> 24
	26 -> 25
	27 -> 5
	28 -> 27
	29 -> 28
}
