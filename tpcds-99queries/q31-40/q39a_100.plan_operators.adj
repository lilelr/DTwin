// The Round Table
digraph {
	0 [label="nodeID(0) "]
	1 [label="nodeID(1) Sort [w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#1 ASC NULLS FIRST, cov#2 ASC NULLS FIRST, d_moy#259 ASC NULLS FIRST, mean#106 ASC NULLS FIRST, cov#107 ASC NULLS FIRST], true, 0"]
	2 [label="nodeID(2) Exchange rangepartitioning(w_warehouse_sk#29 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#51 ASC NULLS FIRST, mean#1 ASC NULLS FIRST, cov#2 ASC NULLS FIRST, d_moy#259 ASC NULLS FIRST, mean#106 ASC NULLS FIRST, cov#107 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [plan_id=217]"]
	3 [label="nodeID(3) SortMergeJoin [i_item_sk#7, w_warehouse_sk#29], [i_item_sk#215, w_warehouse_sk#237], Inner"]
	4 [label="nodeID(4) Sort [i_item_sk#7 ASC NULLS FIRST, w_warehouse_sk#29 ASC NULLS FIRST], false, 0"]
	5 [label="nodeID(5) Exchange hashpartitioning(i_item_sk#7, w_warehouse_sk#29, 200), ENSURE_REQUIREMENTS, [plan_id=211]"]
	6 [label="nodeID(6) Project [w_warehouse_sk#29, i_item_sk#7, d_moy#51, mean#1, CASE WHEN (mean#1 = 0.0) THEN null ELSE (stdev#0 / mean#1) END AS cov#2]"]
	7 [label="nodeID(7) Filter CASE WHEN (mean#1 = 0.0) THEN false ELSE ((stdev#0 / mean#1) > 1.0) END"]
	8 [label="nodeID(8) HashAggregate(keys=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], functions=[stddev_samp(cast(inv_quantity_on_hand#6 as double)), avg(inv_quantity_on_hand#6)])"]
	9 [label="nodeID(9) Exchange hashpartitioning(w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51, 200), ENSURE_REQUIREMENTS, [plan_id=188]"]
	10 [label="nodeID(10) HashAggregate(keys=[w_warehouse_name#31, w_warehouse_sk#29, i_item_sk#7, d_moy#51], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#6 as double)), partial_avg(inv_quantity_on_hand#6)])"]
	11 [label="nodeID(11) Project [inv_quantity_on_hand#6, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31, d_moy#51]"]
	12 [label="nodeID(12) BroadcastHashJoin [inv_date_sk#3], [d_date_sk#43], Inner, BuildRight, false"]
	13 [label="nodeID(13) Project [inv_date_sk#3, inv_quantity_on_hand#6, i_item_sk#7, w_warehouse_sk#29, w_warehouse_name#31]"]
	14 [label="nodeID(14) BroadcastHashJoin [inv_warehouse_sk#5], [w_warehouse_sk#29], Inner, BuildRight, false"]
	15 [label="nodeID(15) Project [inv_date_sk#3, inv_warehouse_sk#5, inv_quantity_on_hand#6, i_item_sk#7]"]
	16 [label="nodeID(16) BroadcastHashJoin [inv_item_sk#4], [i_item_sk#7], Inner, BuildRight, false"]
	17 [label="nodeID(17) Filter ((isnotnull(inv_item_sk#4) AND isnotnull(inv_warehouse_sk#5)) AND isnotnull(inv_date_sk#3))"]
	18 [label="nodeID(18) FileScan parquet tpcds_100_parquet.inventory[inv_date_sk#3,inv_item_sk#4,inv_warehouse_sk#5,inv_quantity_on_hand#6]"]
	19 [label="nodeID(19) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=175]"]
	20 [label="nodeID(20) Filter isnotnull(i_item_sk#7)"]
	21 [label="nodeID(21) FileScan parquet tpcds_100_parquet.item[i_item_sk#7]"]
	22 [label="nodeID(22) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=179]"]
	23 [label="nodeID(23) Filter isnotnull(w_warehouse_sk#29)"]
	24 [label="nodeID(24) FileScan parquet tpcds_100_parquet.warehouse[w_warehouse_sk#29,w_warehouse_name#31]"]
	25 [label="nodeID(25) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=183]"]
	26 [label="nodeID(26) Project [d_date_sk#43, d_moy#51]"]
	27 [label="nodeID(27) Filter ((((isnotnull(d_year#49) AND isnotnull(d_moy#51)) AND (d_year#49 = 2001)) AND (d_moy#51 = 1)) AND isnotnull(d_date_sk#43))"]
	28 [label="nodeID(28) FileScan parquet tpcds_100_parquet.date_dim[d_date_sk#43,d_year#49,d_moy#51]"]
	29 [label="nodeID(29) Sort [i_item_sk#215 ASC NULLS FIRST, w_warehouse_sk#237 ASC NULLS FIRST], false, 0"]
	30 [label="nodeID(30) Exchange hashpartitioning(i_item_sk#215, w_warehouse_sk#237, 200), ENSURE_REQUIREMENTS, [plan_id=212]"]
	31 [label="nodeID(31) Project [w_warehouse_sk#237, i_item_sk#215, d_moy#259, mean#1 AS mean#106, CASE WHEN (mean#1 = 0.0) THEN null ELSE (stdev#0 / mean#1) END AS cov#107]"]
	32 [label="nodeID(32) Filter CASE WHEN (mean#1 = 0.0) THEN false ELSE ((stdev#0 / mean#1) > 1.0) END"]
	33 [label="nodeID(33) HashAggregate(keys=[w_warehouse_name#239, w_warehouse_sk#237, i_item_sk#215, d_moy#259], functions=[stddev_samp(cast(inv_quantity_on_hand#214 as double)), avg(inv_quantity_on_hand#214)])"]
	34 [label="nodeID(34) Exchange hashpartitioning(w_warehouse_name#239, w_warehouse_sk#237, i_item_sk#215, d_moy#259, 200), ENSURE_REQUIREMENTS, [plan_id=205]"]
	35 [label="nodeID(35) HashAggregate(keys=[w_warehouse_name#239, w_warehouse_sk#237, i_item_sk#215, d_moy#259], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#214 as double)), partial_avg(inv_quantity_on_hand#214)])"]
	36 [label="nodeID(36) Project [inv_quantity_on_hand#214, i_item_sk#215, w_warehouse_sk#237, w_warehouse_name#239, d_moy#259]"]
	37 [label="nodeID(37) BroadcastHashJoin [inv_date_sk#211], [d_date_sk#251], Inner, BuildRight, false"]
	38 [label="nodeID(38) Project [inv_date_sk#211, inv_quantity_on_hand#214, i_item_sk#215, w_warehouse_sk#237, w_warehouse_name#239]"]
	39 [label="nodeID(39) BroadcastHashJoin [inv_warehouse_sk#213], [w_warehouse_sk#237], Inner, BuildRight, false"]
	40 [label="nodeID(40) Project [inv_date_sk#211, inv_warehouse_sk#213, inv_quantity_on_hand#214, i_item_sk#215]"]
	41 [label="nodeID(41) BroadcastHashJoin [inv_item_sk#212], [i_item_sk#215], Inner, BuildRight, false"]
	42 [label="nodeID(42) Filter ((isnotnull(inv_item_sk#212) AND isnotnull(inv_warehouse_sk#213)) AND isnotnull(inv_date_sk#211))"]
	43 [label="nodeID(43) FileScan parquet tpcds_100_parquet.inventory[inv_date_sk#211,inv_item_sk#212,inv_warehouse_sk#213,inv_quantity_on_hand#214]"]
	44 [label="nodeID(44) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=192]"]
	45 [label="nodeID(45) Filter isnotnull(i_item_sk#215)"]
	46 [label="nodeID(46) FileScan parquet tpcds_100_parquet.item[i_item_sk#215]"]
	47 [label="nodeID(47) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=196]"]
	48 [label="nodeID(48) Filter isnotnull(w_warehouse_sk#237)"]
	49 [label="nodeID(49) FileScan parquet tpcds_100_parquet.warehouse[w_warehouse_sk#237,w_warehouse_name#239]"]
	50 [label="nodeID(50) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=200]"]
	51 [label="nodeID(51) Project [d_date_sk#251, d_moy#259]"]
	52 [label="nodeID(52) Filter ((((isnotnull(d_year#257) AND isnotnull(d_moy#259)) AND (d_year#257 = 2001)) AND (d_moy#259 = 2)) AND isnotnull(d_date_sk#251))"]
	53 [label="nodeID(53) FileScan parquet tpcds_100_parquet.date_dim[d_date_sk#251,d_year#257,d_moy#259]"]
	1 -> 0
	2 -> 1
	3 -> 2
	4 -> 3
	5 -> 4
	6 -> 5
	7 -> 6
	8 -> 7
	9 -> 8
	10 -> 9
	11 -> 10
	12 -> 11
	13 -> 12
	14 -> 13
	15 -> 14
	16 -> 15
	17 -> 16
	18 -> 17
	19 -> 16
	20 -> 19
	21 -> 20
	22 -> 14
	23 -> 22
	24 -> 23
	25 -> 12
	26 -> 25
	27 -> 26
	28 -> 27
	29 -> 3
	30 -> 29
	31 -> 30
	32 -> 31
	33 -> 32
	34 -> 33
	35 -> 34
	36 -> 35
	37 -> 36
	38 -> 37
	39 -> 38
	40 -> 39
	41 -> 40
	42 -> 41
	43 -> 42
	44 -> 41
	45 -> 44
	46 -> 45
	47 -> 39
	48 -> 47
	49 -> 48
	50 -> 37
	51 -> 50
	52 -> 51
	53 -> 52
}
