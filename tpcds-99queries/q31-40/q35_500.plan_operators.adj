// The Round Table
digraph {
	0 [label="nodeID(0) "]
	1 [label="nodeID(1) HashAggregate(keys=[ca_state#35, cd_gender#41, cd_marital_status#42, cd_dep_count#46, cd_dep_employed_count#47, cd_dep_college_count#48], functions=[count(1), min(cd_dep_count#46), max(cd_dep_count#46), avg(cd_dep_count#46), min(cd_dep_employed_count#47), max(cd_dep_employed_count#47), avg(cd_dep_employed_count#47), min(cd_dep_college_count#48), max(cd_dep_college_count#48), avg(cd_dep_college_count#48)])"]
	2 [label="nodeID(2) Exchange hashpartitioning(ca_state#35, cd_gender#41, cd_marital_status#42, cd_dep_count#46, cd_dep_employed_count#47, cd_dep_college_count#48, 200), ENSURE_REQUIREMENTS, [plan_id=201]"]
	3 [label="nodeID(3) HashAggregate(keys=[ca_state#35, cd_gender#41, cd_marital_status#42, cd_dep_count#46, cd_dep_employed_count#47, cd_dep_college_count#48], functions=[partial_count(1), partial_min(cd_dep_count#46), partial_max(cd_dep_count#46), partial_avg(cd_dep_count#46), partial_min(cd_dep_employed_count#47), partial_max(cd_dep_employed_count#47), partial_avg(cd_dep_employed_count#47), partial_min(cd_dep_college_count#48), partial_max(cd_dep_college_count#48), partial_avg(cd_dep_college_count#48)])"]
	4 [label="nodeID(4) Project [ca_state#35, cd_gender#41, cd_marital_status#42, cd_dep_count#46, cd_dep_employed_count#47, cd_dep_college_count#48]"]
	5 [label="nodeID(5) BroadcastHashJoin [c_current_cdemo_sk#11], [cd_demo_sk#40], Inner, BuildRight, false"]
	6 [label="nodeID(6) Project [c_current_cdemo_sk#11, ca_state#35]"]
	7 [label="nodeID(7) BroadcastHashJoin [c_current_addr_sk#13], [ca_address_sk#27], Inner, BuildRight, false"]
	8 [label="nodeID(8) Project [c_current_cdemo_sk#11, c_current_addr_sk#13]"]
	9 [label="nodeID(9) Filter (exists#267 OR exists#268)"]
	10 [label="nodeID(10) SortMergeJoin [c_customer_sk#9], [cs_ship_customer_sk#144], ExistenceJoin(exists#268)"]
	11 [label="nodeID(11) SortMergeJoin [c_customer_sk#9], [ws_bill_customer_sk#106], ExistenceJoin(exists#267)"]
	12 [label="nodeID(12) SortMergeJoin [c_customer_sk#9], [ss_customer_sk#52], LeftSemi"]
	13 [label="nodeID(13) Sort [c_customer_sk#9 ASC NULLS FIRST], false, 0"]
	14 [label="nodeID(14) Exchange hashpartitioning(c_customer_sk#9, 200), ENSURE_REQUIREMENTS, [plan_id=168]"]
	15 [label="nodeID(15) Filter (isnotnull(c_current_addr_sk#13) AND isnotnull(c_current_cdemo_sk#11))"]
	16 [label="nodeID(16) FileScan parquet tpcds_500_parquet.customer[c_customer_sk#9,c_current_cdemo_sk#11,c_current_addr_sk#13"]
	17 [label="nodeID(17) Sort [ss_customer_sk#52 ASC NULLS FIRST], false, 0"]
	18 [label="nodeID(18) Exchange hashpartitioning(ss_customer_sk#52, 200), ENSURE_REQUIREMENTS, [plan_id=169]"]
	19 [label="nodeID(19) Project [ss_customer_sk#52]"]
	20 [label="nodeID(20) BroadcastHashJoin [ss_sold_date_sk#49], [d_date_sk#72], Inner, BuildRight, false"]
	21 [label="nodeID(21) Filter isnotnull(ss_sold_date_sk#49)"]
	22 [label="nodeID(22) FileScan parquet tpcds_500_parquet.store_sales[ss_sold_date_sk#49,ss_customer_sk#52"]
	23 [label="nodeID(23) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=163]"]
	24 [label="nodeID(24) Project [d_date_sk#72]"]
	25 [label="nodeID(25) Filter ((((isnotnull(d_year#78) AND isnotnull(d_qoy#82)) AND (d_year#78 = 2002)) AND (d_qoy#82 < 4)) AND isnotnull(d_date_sk#72))"]
	26 [label="nodeID(26) FileScan parquet tpcds_500_parquet.date_dim[d_date_sk#72,d_year#78,d_qoy#82"]
	27 [label="nodeID(27) Sort [ws_bill_customer_sk#106 ASC NULLS FIRST], false, 0"]
	28 [label="nodeID(28) Exchange hashpartitioning(ws_bill_customer_sk#106, 200), ENSURE_REQUIREMENTS, [plan_id=178]"]
	29 [label="nodeID(29) Project [ws_bill_customer_sk#106]"]
	30 [label="nodeID(30) BroadcastHashJoin [ws_sold_date_sk#102], [d_date_sk#175], Inner, BuildRight, false"]
	31 [label="nodeID(31) Filter isnotnull(ws_sold_date_sk#102)"]
	32 [label="nodeID(32) FileScan parquet tpcds_500_parquet.web_sales[ws_sold_date_sk#102,ws_bill_customer_sk#106"]
	33 [label="nodeID(33) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=173]"]
	34 [label="nodeID(34) Project [d_date_sk#175]"]
	35 [label="nodeID(35) Filter ((((isnotnull(d_year#181) AND isnotnull(d_qoy#185)) AND (d_year#181 = 2002)) AND (d_qoy#185 < 4)) AND isnotnull(d_date_sk#175))"]
	36 [label="nodeID(36) FileScan parquet tpcds_500_parquet.date_dim[d_date_sk#175,d_year#181,d_qoy#185"]
	37 [label="nodeID(37) Sort [cs_ship_customer_sk#144 ASC NULLS FIRST], false, 0"]
	38 [label="nodeID(38) Exchange hashpartitioning(cs_ship_customer_sk#144, 200), ENSURE_REQUIREMENTS, [plan_id=186]"]
	39 [label="nodeID(39) Project [cs_ship_customer_sk#144]"]
	40 [label="nodeID(40) BroadcastHashJoin [cs_sold_date_sk#137], [d_date_sk#203], Inner, BuildRight, false"]
	41 [label="nodeID(41) Filter isnotnull(cs_sold_date_sk#137)"]
	42 [label="nodeID(42) FileScan parquet tpcds_500_parquet.catalog_sales[cs_sold_date_sk#137,cs_ship_customer_sk#144"]
	43 [label="nodeID(43) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=181]"]
	44 [label="nodeID(44) Project [d_date_sk#203]"]
	45 [label="nodeID(45) Filter ((((isnotnull(d_year#209) AND isnotnull(d_qoy#213)) AND (d_year#209 = 2002)) AND (d_qoy#213 < 4)) AND isnotnull(d_date_sk#203))"]
	46 [label="nodeID(46) FileScan parquet tpcds_500_parquet.date_dim[d_date_sk#203,d_year#209,d_qoy#213"]
	47 [label="nodeID(47) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=192]"]
	48 [label="nodeID(48) Filter isnotnull(ca_address_sk#27)"]
	49 [label="nodeID(49) FileScan parquet tpcds_500_parquet.customer_address[ca_address_sk#27,ca_state#35"]
	50 [label="nodeID(50) BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=196]"]
	51 [label="nodeID(51) Filter isnotnull(cd_demo_sk#40)"]
	52 [label="nodeID(52) FileScan parquet tpcds_500_parquet.customer_demographics[cd_demo_sk#40,cd_gender#41,cd_marital_status#42,cd_dep_count#46,cd_dep_employed_count#47,cd_dep_college_count#48"]
	1 -> 0
	2 -> 1
	3 -> 2
	4 -> 3
	5 -> 4
	6 -> 5
	7 -> 6
	8 -> 7
	9 -> 8
	10 -> 9
	11 -> 10
	12 -> 11
	13 -> 12
	14 -> 13
	15 -> 14
	16 -> 15
	17 -> 12
	18 -> 17
	19 -> 18
	20 -> 19
	21 -> 20
	22 -> 21
	23 -> 20
	24 -> 23
	25 -> 24
	26 -> 25
	27 -> 11
	28 -> 27
	29 -> 28
	30 -> 29
	31 -> 30
	32 -> 31
	33 -> 30
	34 -> 33
	35 -> 34
	36 -> 35
	37 -> 10
	38 -> 37
	39 -> 38
	40 -> 39
	41 -> 40
	42 -> 41
	43 -> 40
	44 -> 43
	45 -> 44
	46 -> 45
	47 -> 7
	48 -> 47
	49 -> 48
	50 -> 5
	51 -> 50
	52 -> 51
}
